### Eclipse Workspace Patch 1.0
#P org.eclipse.swt
Index: Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java,v
retrieving revision 1.263
diff -u -r1.263 Display.java
--- Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java	8 May 2009 16:55:59 -0000	1.263
+++ Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java	11 May 2009 16:10:21 -0000
@@ -165,6 +165,7 @@
 	static Callback applicationCallback2, applicationCallback3, applicationCallback6;
 	static Callback fieldEditorCallback3, fieldEditorCallback4;
 	
+	int /*long*/ curr_sendEvent, curr_nextEventMatchingMask, curr_isRunning, curr_finishLaunching;
 	/* Display Shutdown */
 	Runnable [] disposeList;
 
@@ -778,30 +779,38 @@
 				application.setApplicationIconImage(image);
 			}
 		}
-
-		String className = "SWTApplication";
-		int /*long*/ cls;
-		if ((cls = OS.objc_lookUpClass (className)) == 0) {
-			Class clazz = getClass();
-			applicationCallback2 = new Callback(clazz, "applicationProc", 2);
-			int /*long*/ proc2 = applicationCallback2.getAddress();
-			if (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
-			applicationCallback3 = new Callback(clazz, "applicationProc", 3);
-			int /*long*/ proc3 = applicationCallback3.getAddress();
-			if (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
-			applicationCallback6 = new Callback(clazz, "applicationProc", 6);
-			int /*long*/ proc6 = applicationCallback6.getAddress();
-			if (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
-			cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);
-			OS.class_addMethod(cls, OS.sel_sendEvent_, proc3, "@:@");
-			OS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, "@:i@@B");
-			OS.class_addMethod(cls, OS.sel_isRunning, proc2, "@:");
-			OS.class_addMethod(cls, OS.sel_finishLaunching, proc2, "@:");
-			OS.objc_registerClassPair(cls);
-		}
-		applicationClass = OS.object_setClass(application.id, cls);
+	} else {
+		isEmbedded = true;
+	}
+	
+	Class clazz = getClass();
+	applicationCallback2 = new Callback(clazz, "applicationProc", 2);
+	int /*long*/ proc2 = applicationCallback2.getAddress();
+	if (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
+	applicationCallback3 = new Callback(clazz, "applicationProc", 3);
+	int /*long*/ proc3 = applicationCallback3.getAddress();
+	if (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
+	applicationCallback6 = new Callback(clazz, "applicationProc", 6);
+	int /*long*/ proc6 = applicationCallback6.getAddress();
+	if (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
+	
+	// We need to dynamically add methods to the running NSApplication's class to support event delivery. 
+	
+	int /*long*/ cls = 0;
+	
+	if (isEmbedded) {
+		cls = OS.object_getClass(application.id);
 		
-		className = "SWTApplicationDelegate";
+		// If we already added it, no need to do it again.
+		int /*long*/ procPtr = OS.class_getMethodImplementation(cls, OS.sel_sendEvent_);
+		if (procPtr == proc3) return;
+		
+		curr_sendEvent = OS.class_getMethodImplementation(cls, OS.sel_sendEvent_);
+		curr_nextEventMatchingMask = OS.class_getMethodImplementation(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_);
+		curr_isRunning = OS.class_getMethodImplementation(cls, OS.sel_isRunning);
+		curr_finishLaunching = OS.class_getMethodImplementation(cls, OS.sel_finishLaunching);
+	} else {	
+		String className = "SWTApplicationDelegate";
 		if (OS.objc_lookUpClass (className) == 0) {
 			int /*long*/ appProc3 = applicationCallback3.getAddress();
 			if (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
@@ -817,11 +826,23 @@
 			OS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, "@:@");
 			OS.objc_registerClassPair(cls);
 		}	
+
 		applicationDelegate = (SWTApplicationDelegate)new SWTApplicationDelegate().alloc().init();
 		application.setDelegate(applicationDelegate);
-	} else {
-		isEmbedded = true;
+		
+		className = "SWTApplication";
+		if ((cls = OS.objc_lookUpClass (className)) == 0) {		
+			cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);
+			OS.objc_registerClassPair(cls);
+		}
+		
 	}
+	
+	OS.class_addMethod(cls, OS.sel_sendEvent_, proc3, "@:@");
+	OS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, "@:i@@B");
+	OS.class_addMethod(cls, OS.sel_isRunning, proc2, "@:");
+	OS.class_addMethod(cls, OS.sel_finishLaunching, proc2, "@:");
+	applicationClass = OS.object_setClass(application.id, cls);	
 }
 
 void createMainMenu () {
@@ -4316,7 +4337,14 @@
 static int /*long*/ applicationProc(int /*long*/ id, int /*long*/ sel) {
 	//TODO optimize getting the display
 	Display display = getCurrent ();
-	if (display == null) return 0;
+
+	if (display == null) {
+		objc_super super_struct = new objc_super ();
+		super_struct.receiver = id;
+		super_struct.super_class = OS.objc_msgSend (id, OS.sel_superclass);
+		return OS.objc_msgSendSuper (super_struct, sel);
+	}
+
 	if (sel == OS.sel_isRunning) {
 		// #245724: [NSApplication isRunning] must return true to allow the AWT to load correctly.
 		return display.isDisposed() ? 0 : 1;
@@ -4330,7 +4358,14 @@
 static int /*long*/ applicationProc(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {
 	//TODO optimize getting the display
 	Display display = getCurrent ();
-	if (display == null) return 0;
+
+	if (display == null) {
+		objc_super super_struct = new objc_super ();
+		super_struct.receiver = id;
+		super_struct.super_class = OS.objc_msgSend (id, OS.sel_superclass);
+		return OS.objc_msgSendSuper (super_struct, sel, arg0);
+	}
+
 	NSApplication application = display.application;
 	if (sel == OS.sel_sendEvent_) {
 		display.applicationSendEvent (id, sel, arg0);
@@ -4365,7 +4400,14 @@
 static int /*long*/ applicationProc(int /*long*/ id, int /*long*/sel, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3) {
 	//TODO optimize getting the display
 	Display display = getCurrent ();
-	if (display == null) return 0;
+
+	if (display == null) {
+		objc_super super_struct = new objc_super ();
+		super_struct.receiver = id;
+		super_struct.super_class = OS.objc_msgSend (id, OS.sel_superclass);
+		return OS.objc_msgSendSuper (super_struct, sel, arg0, arg1, arg2, arg3 == 1);
+	}
+
 	if (sel == OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_) {
 		return display.applicationNextEventMatchingMask(id, sel, arg0, arg1, arg2, arg3);
 	}
