#summary Information about the HtmlUnit Driver

= HtmlUnit Driver =

This is currently the fastest and most lightweight implementation of WebDriver. As the name suggests, this is based on HtmlUnit.

== Pros ==

 * Fastest implementation of WebDriver
 * A pure Java solution and so it is platform independent.

== Cons ==

 * Does not support Javascript.

== HtmlUnit Supports Javascript So Why Doesn't the HtmlUnitDriver? ==

The short answer is that it's disabled because no browser that's in widespread use has the javascript engine used by HtmlUnit ([http://www.mozilla.org/rhino/ Rhino]). By disabling javascript in the HtmlUnitDriver we can be sure that any issues which are found will effect end-users of the application under test.

The long answer is that when we say "javascript" we actually mean "javascript and the DOM". Although the DOM is [http://www.w3.org/DOM/ defined by the W3C] each browser out there has its own quirks and differences in their implementation of the DOM and in how javascript interacts with it. HtmlUnit has an impressively complete implementation of the DOM and has good support for using javascript, but it is no different from any other browser: it has its own quirks and differences from both the W3C standard and the DOM implementations of the major browsers, despite its ability to [http://htmlunit.sourceforge.net/javascript.html mimic other browsers].

With WebDriver, we had to make a choice; do we enable HtmlUnit's javascript capabilities and run the risk of teams running into problems that only manifest themselves there, or do we leave javascript disabled, knowing that there are more and more sites that rely on javascript? We took the conservative approach, and have disabled support when we use HtmlUnit.

== Enabling Javascript ==

Enabling Javascript support is fairly easy, though a little messy:

{{{
WebDriver driver = new HtmlUnitDriver() {
    protected void newWebClient() {
        super.newWebClient();
        getWebClient().setJavaScriptEnabled(true);
    }
};
}}}

If there is enough demand, we might expose this functionality through a slightly nicer API in the future.