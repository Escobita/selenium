#summary Getting Started With Android Driver
#labels Phase-Deploy,Phase-Design,Phase-Implementation,Mobile,WebDriver

<wiki:toc max_depth="3" />

= Introduction =

Android WebDriver allows to run automated end-to-end tests that ensure your site works correctly when viewed from the Android browser. Android WebDriver supports all core WebDriver APIs, and in addition to that it supports mobile spacific and HTML5 APIs. Android WebDriver models many user interactions such as finger taps, flicks, finger scrolls and long presses. It can rotate the display and interact with HTML5 features such as local storage, session storage and application cache.

We try to stay as close as possible to what the user interaction with the browser is. To do so, Android WebDriver runs the tests against a WebView (rendering component used by the Android browser) configured like the Android browser. To interact with the page Android WebDriver uses native touch and key events. To query the DOM, it uses the JavaScript Atoms libraries. 

== Known Issues ==
   * Support for SDK versions 2.0 and prior, has been deprecated. The driver is unlikely to work reliably on these versions. There were several limitations, for instance XPath wasn't supported natively and the Android Driver used to inject an Xpath library in WebView. We recommend using devices with version 2.2 or later.
   * Does not work on emulators running 2.3 because of an emulator bug. However it works on Devices running 2.3 (and runs much faster on those).

= Get Started =
== Install the Android SDK ==
Download the [http://developer.android.com/sdk/index.html Android SDK], and unpack it in a directory, say ~/android_sdk/ .

== Setup the Environment  ==
Android WebDriver test can run on emulators or real devices for phone and tablets.

=== Setup the Emulator ===

To create an emulator, you can use the [http://developer.android.com/guide/developing/devices/managing-avds.html graphical interface] provided by the Android SDK, or the [http://developer.android.com/guide/developing/devices/emulator.html command line]. Below are instructions for using the command line.

First, let's create an Android Virtual Device (AVD):
{{{
$cd ~/android_sdk/tools/
$./android create avd -n my_android -t 12 -c 100M
}}}

-n: specifies the name of the AVD.

-t: specifies the platform target. For an exhaustive list of targets, run:
{{{
./android list targets
}}}
Make sure the target level you selected corresponds to a supported SDK platform.

-c: specifies the SD card storage space.

When prompted "Do you wish to create a custom hardware profile `[`no`]`" enter "no".

*Note: An Android emulator bug prevents WebDriver from running on emulators on platforms 2.3 (Gingerbread).*

Now, start the emulator. This can take a while, but take a look at the FAQ below for tips on how to improve performance of the emulator.
{{{
$./emulator -avd my_android &
}}}

=== Setup the Device  ===
Simply connect your Android device through USB to your machine!

== Android WebDriver Using the Remote Server == 
=== Install the WebDriver ===
Every device or emulator has a serial ID. Run this command to get the serial ID of the device or emulator you want to use:
{{{
$~/android_sdk/platform-tools/adb devices
}}}

Download the Android server from our [http://code.google.com/p/selenium/downloads/list downloads page]. To install the application do:
{{{
$./adb -s <serialId> -e install -r  android-server.apk
}}}

Make sure you are allowing installation of application not coming from Android Market. Go to Settings -> Applications, and check "Unknown Sources".

Start the Android WebDriver application through the UI of the device or by running this command:
{{{
$./adb -s <serialId> shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity
}}}

You can start the application in debug mode, which has more verbose logs by doing:
{{{
$./adb -s <serialId> shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity -e debug true
}}}

Now we need to setup the port forwarding in order to forward traffic from the host machine to the emulator.
In a terminal type: 
{{{
$./adb -s <serialId> forward tcp:8080 tcp:8080
}}}

This will make the android server available at http://localhost:8080/wd/hub

=== Tips ===
   * Remember to set the following settings on your device: Settings -> Applications -> Development -> Check "USB debugging", "Stay Awake" and "Allow mock locations".
   * Restart adb if you have networking errors reported when your tests run. Sometimes there are issues connecting to the device / emulator after switching devices. run {{{adb kill-server}}} followed by {{{adb start-server}}} then setup port forwarding again for the device you want to use. 

== Android WebDriver Using the Android Test Framework ==

== Run Your Tests ==
{{{
import junit.framework.TestCase;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.android.AndroidDriver;

public class OneTest extends TestCase {

  public void testGoogle() throws Exception {
    AndroidDriver driver = new AndroidDriver();
    
    // And now use this to visit Google
    driver.get("http://www.google.com");
    
    // Find the text input element by its name
    WebElement element = driver.findElement(By.name("q"));
    
    // Enter something to search for
    element.sendKeys("Cheese!");
    
    // Now submit the form. WebDriver will find the form for us from the element
    element.submit();
    
    // Check the title of the page
    System.out.println("Page title is: " + driver.getTitle());
    driver.quit();

  }
}
}}}

To compile and run this example you will need the selenium-java-X.zip (client side piece of selenium).
Download the selenium-java-X.zip from our [http://code.google.com/p/selenium/downloads/list download page], unzip and included all jars in your eclipse project (Right click on project -> Build Path -> Configure Build Path -> Libraries -> Add External Jars)

== Tips ==
  * *Avoid using XPath*: XPath is not yet natively supported in Android WebView, so we inject our own XPath library in the browser which makes looking up element by XPath an expensive operation. Rather prefer looking up elements by ID, name, tag name, etc.
  * *Keep the same emulator instance*: Starting an Android emulator is an expensive operation which can take up to 2 minute depending on your machine specifications. Do this once for your entire test suite. If you need a fresh instance of the driver call WebDriver#quit() which flushes the WebView cache, cookies, user data, etc.
  * *Avoid requesting the entire page source*, if all you need is to verify that it contains a string or an element. Rather lookup elements by their IDs, name, etc.
  * *Prefer window handles to window names*:  (e.g. String current = driver.getWindowHandle(); driver.switchTo().window(current);).  Switching to a window by it's name property is more expensive because it requires injecting Javascript in every open window. While handles are saved in map which provides faster lookup times. 

= Get Involved =


Note 1: if your sdk is installed in a different folder, edit {{{./properties.yml}}} to reflect that location. {{{./properties.yml}}} also specifies the Android platform version to use - again update the value to the version of the sdk you want to use e.g. version 8 for Android 2.2

Note2: On Linux, android SDK is distributed for 32-bits machine. If you have a 64-bit machine you will need to install ia32-libs http://developer.android.com/sdk/installing.html#troubleshooting

   * Check out the code:
{{{
$svn checkout https://selenium.googlecode.com/svn/trunk/ webdriver
}}}

== Build the Android Driver Code ==
{{{
$cd webdriver
}}}

   * To build the client and the server
{{{
$./go android
}}}
   * To build the client
{{{
$./go android_client
}}}
   * To build the server
{{{
$./go android_server
}}}
   * To run the tests
{{{
$./go test_android
}}}
You may see the tests executing in the emulator if the emulator screen is locked, but they are running in the background. If you want to see them simply unlock the screen.

Note that "./go test_android" will fail if there is already an emulator running.

== Debug on Android ==
   * Run the tests
It's advised to start your own emulator instance (instructions above), leave the emulator running and run the tests. This will prevent you from paying the cost of starting a new emulator for every test run. To run the tests on an already running emulator:
{{{
$./go //java/client/test/org/openqa/selenium/android:java-test:run  haltonerror=false haltonfailure=false
}}}

   * To run one test class only:
{{{
./go //java/client/test/org/openqa/selenium/android:java-test:run onlyrun=LocalStorageTest haltonerror=false haltonfailure=false
}}}

   * To run one test method only:
{{{
./go //java/client/test/org/openqa/selenium/android:java-test:run method=testShouldTreatReadonlyAsAValue
}}}

   * To access the Android logs (server side logs):
{{{
$./adb logcat
}}}
The Android logcat logs are the most useful piece of information for debugging and fixing an issue.
You can also filter the logs by adding "ActivityMAnager:W" for example to the logcat command.

   * To access the JS console:
- Open the android browser
- Type "about:debug" in the address bar, this is a toggle setting that will enable the JS console
- Execute Js in the browser by typing javascript:<your JS>, you will see the JS console opening

   * View the client side logs:
{{{
$ls build/test_logs
}}}

== Make a Release == 
To release an apk, build the new apk:
{{{
$ ./go //android/app:android-server
}}}

Check-in the new prebuilt apk:
{{{
$ svn ci android/app/prebuilt/app/android-server.apk
}}}

Updalod the new APK on the Downloads page with release notes.


= FAQ =
== How to start jetty ==
Jetty is started by the application installed. So it should start when you first start the application.

== I get "Page not Available" ==
Sometimes the Android emulator does not detect the connection of the host machine it runs on. The solution in this case is to restart the emulator.

== Android WebDriver fails to load HTTPS pages ==
You can enable accepting all HTTPS certs by setting a capability as follow:
{{{
DesiredCapabilities caps = DesiredCapabilities.android();
caps.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);

AndroidDriver driver = new AndroidDriver(caps);
}}}

== The emulator is too slow, what can I do ==
Couple things, you can start the emulator with the following options:
-no-window
-no-audio
-no-boot-anim

If you start the emulator with -no-window, you can launch the WebDriver app with this command:
{{{
$adb shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity
}}}

Or in debug mode:
{{{
 $adb shell am start -a android.intent.action.MAIN -n org.openqa.selenium.android.app/.MainActivity -e debug true
}}}

Alternatively, newer devices using 2.3 (Gingerbread) and higher are much faster than emulators.