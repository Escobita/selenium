#summary Getting Started With Android Driver
#labels Phase-Deploy,Phase-Design,Phase-Implementation,Mobile,WebDriver

= Introduction =

The Android Driver uses the [http://code.google.com/p/selenium/wiki/RemoteWebDriver RemoteWebDriver]. The client side is your test code. The server side is an application that gets installed on the android emulator or device. It uses the [http://code.google.com/p/selenium/wiki/RemoteWebDriverServer RemoteWebDriver Server] component and embeds a light-weight HTTP server (Jetty). The client and the server communicate using the [http://code.google.com/p/selenium/wiki/JsonWireProtocol Wire Protocol] which consists of REST requests using JSON over HTTP. The application executes the tests in the context of an Android  WebView.

= Pros & Cons =
== Pros ==
   * Runs in Android browser
   * Uses native touch events to emulate user interaction
   * Runs on emulator and device

== Cons ==
   * Slower than Headless WebKit Driver
   * Support for SDK versions 2.2 and prior, has been deprecated. The driver is unlikely to work reliably on these versions. There were several limitations, for instance XPath wasn't supported natively and the Android Driver used to inject an Xpath library in WebView. We recommend using devices with version 2.2 or later.
   * Does not work on emulators running 2.3 because of an emulator bug that should be fixed soon by Android. However it works on Devices running 2.3 and higher (and runs much faster on those).

= Important System Properties =
== Native events and Javascript ==
We try to stay as close as possible to what the user interaction with the browser is. To do so we send native Android touch and key events for interacting with the page (WebElement.click(), WebElement.sendKeys(...), etc.).
When questionning the page (WebElement.getValue(), WebElement.getText(), etc.) we use Javascript injection to poll the DOM.

== HTML5 Features ==
_Documentation coming soon..._
   * Application Cache
   * WebStorage
   * Web SQL Database
   * Offline / Online Browser Mode
   * Geolocation

= Get Started =
== Install the SDK ==
Download the [http://developer.android.com/sdk/index.html Android SDK], and unpack it in a directory, say ~/android_sdk/ .

Note 1: if your sdk is installed in a different folder, edit {{{./properties.yml}}} to reflect that location. {{{./properties.yml}}} also specifies the Android platform version to use - again update the value to the version of the sdk you want to use e.g. version 8 for Android 2.2

Note2: On Linux, android SDK is distributed for 32-bits machine. If you have a 64-bit machine you will need to install ia32-libs http://developer.android.com/sdk/installing.html#troubleshooting

== Setup the Emulator  ==
=== Create An AVD ===
Execute the following command to create a new Android Virtual Device (avd):
{{{
$cd ~/android_sdk/tools/
$./android create avd -n my_android -t 12 -c 100M
}}}

-n or naming your android virtual device.

-t for specifying the target. ("./android list targets" will give you a list of all available targets). Make sure the target level you selected corresponds to the latest API level.

-c option is for the SD card storage space.

When prompted "Do you wish to create a custom hardware profile [no]" enter "no".

*Note: an issue has been discovered with the Java-to-JavaScript bridge in version 2.3 of the emulator which causes problems for the Android Driver. Currently we recommend using version of the Android platform 2.2 for AVDs.*
===Start the Emulator ===
Start the emulator (this can take a while):
{{{
$./emulator -avd my_android &
}}}

=== Install the Application ===
Install Android WebDriver Application. Wait until the emulator has started and the home screen is ready. Install android-server.apk:
{{{
$./adb -e install -r  android-server.apk
}}}

If you face an issue, make sure you are allowing installation of application not coming from Android Market (Android Emulator -> Settings -> Applications -> Unknown sources is checked)

=== Setup Port Forwarding ===
In a terminal type: 
{{{
$~/android_sdk/adb forward tcp:8080 tcp:8080
}}}

This will make the android server available at http://localhost:8080/wd/hub

=== Install Android WebDriver on Real Device ===

Connect your device through USB to your machine.
{{{
$~/android_sdk/tools/adb devices
}}}

This will give you the serial Id of your connected device. Now install the apk on the device:
 {{{
$./adb -s <serialId> -e install -r android-server.apk
}}}

Setup port forwarding:
{{{
$~/android_sdk/adb -s <serialId> forward tcp:8080 tcp:8080
}}}

=== Start the WebDriver Server on the device or emulator ===
Start the WebDriver application just installed in the device or emulator.

=== Tips ===
   * Remember to set the following settings on your device: Settings -> Applications -> Development -> Check "USB debugging", "Stay Awake" and "Allow mock locations".
   * Restart adb if you have networking errors reported when your tests run. Sometimes there are issues connecting to the device / emulator after switching devices. run {{{adb kill-server}}} followed by {{{adb start-server}}} then setup port forwarding again for the device you want to use. 
== Run Your Tests ==
{{{
import junit.framework.TestCase;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.android.AndroidDriver;

public class OneTest extends TestCase {

  public void testGoogle() throws Exception {
    AndroidDriver driver = new AndroidDriver();
    
    // And now use this to visit Google
    driver.get("http://www.google.com");
    
    // Find the text input element by its name
    WebElement element = driver.findElement(By.name("q"));
    
    // Enter something to search for
    element.sendKeys("Cheese!");
    
    // Now submit the form. WebDriver will find the form for us from the element
    element.submit();
    
    // Check the title of the page
    System.out.println("Page title is: " + driver.getTitle());
    driver.quit();

  }
}
}}}

To compile and run this example you will need the selenium-java-X.zip (client side piece of selenium).
Download the selenium-java-X.zip from our [http://code.google.com/p/selenium/downloads/list download page], unzip and included all jars in your eclipse project (Right click on project -> Build Path -> Configure Build Path -> Libraries -> Add External Jars)

== Tips ==
  * *Avoid using XPath*: XPath is not yet natively supported in Android WebView, so we inject our own XPath library in the browser which makes looking up element by XPath an expensive operation. Rather prefer looking up elements by ID, name, tag name, etc.
  * *Keep the same emulator instance*: Starting an Android emulator is an expensive operation which can take up to 2 minute depending on your machine specifications. Do this once for your entire test suite. If you need a fresh instance of the driver call WebDriver#quit() which flushes the WebView cache, cookies, user data, etc.
  * *Avoid requesting the entire page source*, if all you need is to verify that it contains a string or an element. Rather lookup elements by their IDs, name, etc.
  * *Prefer window handles to window names*:  (e.g. String current = driver.getWindowHandle(); driver.switchTo().window(current);).  Switching to a window by it's name property is more expensive because it requires injecting Javascript in every open window. While handles are saved in map which provides faster lookup times. 

= Get Involved =
   * Check out the code:
{{{
$svn checkout https://selenium.googlecode.com/svn/trunk/ webdriver
}}}

== Build the Android Driver Code ==
{{{
$cd webdriver
}}}

   * To build the client and the server
{{{
$./go android
}}}
   * To build the client
{{{
$./go android_client
}}}
   * To build the server
{{{
$./go android_server
}}}
   * To run the tests
{{{
$./go test_android
}}}

== Debug on Android ==
   * To access the android logs:
{{{
$./adb logcat
}}}
You can also filter the logs by adding "ActivityMAnager:W" for example to the logcat command.

   * To access the JS console:
- Open the android browser
- Type "abou:debug" in the address bar, this is a toggle setting that will enable the JS console
- Execute Js in the browser by typing javascript:<your JS>, you will see the JS console opening


= FAQ =
== How to start jetty ==
Jetty is started by the application installed. So it should start when you first start the application.

== I get "Page not Available" ==
Sometimes the Android emulator does not detect the connection of the host machine it runs on. The solution in this case is to restart the emulator.

== Android WebDriver fails to load HTTPS pages ==
You can enable accepting all HTTPS certs by setting a capability as follow:
{{{
DesiredCapabilities caps = DesiredCapabilities.android();
caps.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);

AndroidDriver driver = new AndroidDriver(caps);
}}}

== The emulator is too slow, what can I do ==
Couple things, you can start the emulator with the following options:
-no-window
-no-audio
-no-boot-anim

Alternatively, newer devices using 2.3 (Gingerbread) and higher are much faster than emulators.