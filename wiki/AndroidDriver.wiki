#summary Getting Started With Android Driver
#labels Phase-Deploy,Phase-Design,Phase-Implementation,Mobile,WebDriver

= Introduction =

The Android Driver uses the [http://code.google.com/p/selenium/wiki/RemoteWebDriver RemoteWebDriver]. The client side is your test code. The server side is an application that gets installed on the android emulator or device. It uses the [http://code.google.com/p/selenium/wiki/RemoteWebDriverServer RemoteWebDriver Server] component and embeds a light-weight HTTP server (Jetty). The client and the server communicate using the [http://code.google.com/p/selenium/wiki/JsonWireProtocol Wire Protocol] which consists of REST requests using JSON over HTTP. The application executes the tests in the context of an Android  WebView.

= Pros & Cons =
== Pros ==
   * Runs in Android browser
   * Uses native touch events to emulate user interaction
   * Runs on emulator and device

== Cons ==
   * Slower than Headless WebKit Driver
   * For SDK versions 2.2 and prior, XPath based queries are expensive (slow), because Android does not support XPath, so we inject an Xpath library in WebView

= Important System Properties =
== Native events and Javascript ==
We try to stay as close as possible to what the user interaction with the browser is. To do so we send native Android touch and key events for interacting with the page (WebElement.click(), WebElement.sendKeys(...), etc.).
When questionning the page (WebElement.getValue(), WebElement.getText(), etc.) we use Javascript injection to poll the DOM.

== HTML5 Features ==
_Documentation coming soon..._
   * Application Cache
   * WebStorage
   * Web SQL Database
   * Offline / Online Browser Mode
   * Geolocation

= Get Started =
== Install the SDK ==
Download the [http://developer.android.com/sdk/index.html Android SDK], and unpack it in a directory, say ~/android_sdk/ .

Note: if your sdk is installed in a different folder, edit {{{./properties.yml}}} to reflect that location. {{{./properties.yml}}} also specifies the Android platform version to use - again update the value to the version of the sdk you want to use e.g. version 8 for Android 2.2

== Setup the Emulator  ==
=== Create An AVD ===
Execute the following command to create a new Android Virtual Device (avd):
{{{
$cd ~/android_sdk/tools/
$./android create avd -n my_android -t 12 -c 100M
}}}

-n or naming your android virtual device.

-t for specifying the target. ("./android list targets" will give you a list of all available targets). Make sure the target level you selected corresponds to the latest API level.

-c option is for the SD card storage space.

When prompted "Do you wish to create a custom hardware profile [no]" enter "no".

===Start the Emulator ===
Start the emulator (this can take a while):
{{{
$./emulator -avd my_android &
}}}

=== Install the Application ===
Install Android WebDriver Application. Wait until the emulator has started and the home screen is ready. Install android-server.apk:
{{{
$./adb -e install -r  android-server.apk
}}}

If you face an issue, make sure you are allowing installation of application not coming from Android Market (Android Emulator -> Settings -> Applications -> Unknown sources is checked)
Open the application just installed.

=== Setup Port Forwarding ===
In a terminal type: 
{{{
$~/android_sdk/adb forward tcp:8080 tcp:8080
}}}

=== Install Android WebDriver on Real Device ===

Connect your device through USB to your machine.
{{{
$cd ~/android_sdk/tools/adb devices
}}}

This will give you the serial Id of your connected device. Now install the apk on the device:
 {{{
$./adb -s <serialId> -e install -r android-server.apk
}}}

Setup port forwarding:
{{{
$~/android_sdk/adb -s <serialId> forward tcp:8080 tcp:8080
}}}

Remember to set the following settings on your device: Settings -> Applications -> Development -> Check "USB debugging", "Stay Awake" and "Allow mock locations".

== Run Your Tests ==
{{{
import junit.framework.TestCase;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.android.AndroidDriver;

public class OneTest extends TestCase {

  public void testGoogle() throws Exception {
    AndroidDriver driver = new AndroidDriver();
    
    // And now use this to visit Google
    driver.get("http://www.google.com");
    
    // Find the text input element by its name
    WebElement element = driver.findElement(By.name("q"));
    
    // Enter something to search for
    element.sendKeys("Cheese!");
    
    // Now submit the form. WebDriver will find the form for us from the element
    element.submit();
    
    // Check the title of the page
    System.out.println("Page title is: " + driver.getTitle());
  }
}.
}}}

To compile and run this example you will need the Android Client library in {{{./webdriver/build/android/client/client.jar}}} (see below for details of how to build it), and selenium-server-standalone-2.0a5.jar (or the current version available on this site).

= Get Involved =
   * Check out the code:
{{{
$svn checkout https://selenium.googlecode.com/svn/trunk/ webdriver
}}}

== Build the Android Driver Code ==
{{{
$cd webdriver
}}}

   * To build the client and the server
{{{
$./go android
}}}
   * To build the client
{{{
$./go android_client
}}}
   * To build the server
{{{
$./go android_server
}}}
   * To run the tests
{{{
$./go test_android
}}}