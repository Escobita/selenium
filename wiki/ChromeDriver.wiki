#summary Information about the Chrome Driver
#labels WebDriver

= Chrome Driver =

Developed in collaboration with the Chromium team, the !ChromeDriver is a standalone server which implements !WebDriver's  [JsonWireProtocol wire protocol].

== Requirements ==

The !ChromeDriver controls the browser using Chrome's automation proxy framework.  Consequently, the !ChromeDriver is only compatible with Chrome version 12.0.712.0 or newer.

The server expects you to have Chrome installed in the default location for each system:
|| *OS* || *Expected Location of Chrome* ||
|| Linux || /usr/bin/google-chrome^1^ ||
|| Mac || /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome ||
|| Windows XP || %HOMEPATH%\Local Settings\Application Data\Google\Chrome\Application\chrome.exe ||
|| Windows Vista || C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe ||

^1^ For Linux systems, the !ChromeDriver expects /usr/bin/google-chrome to be a symlink to the actual binary.

You can override the default location by passing the "chrome.binary" capability, e.g. with Chromium on Debian:

{{{
  DesiredCapabilities capabilities = DesiredCapabilities.chrome();
  capabilities.setCapability("chrome.binary", "/usr/lib/chromium-browser/chromium-browser"));
  WebDriver driver = new ChromeDriver(capabilities);
}}}


== Getting Started ==

To get set up, first [http://code.google.com/p/selenium/downloads/list download] the appropriate prebuilt server.  Make sure the downloaded server can be located on your `PATH` or specify its location via the `webdriver.chrome.driver` system property. Finally, all you need to do is create a new `ChromeDriver` instance:
{{{
WebDriver driver = new ChromeDriver();
driver.get("http://www.google.com");
}}}

=== Running the server in a child process ===

You may notice that the `ChromeDriver` class is merely a convenience class that starts the server upon creation and shuts it down when you call [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#quit() quit].  While the server is light weight, starting and stopping it multiple times will add a noticeable delay to a larger test suite.  To compensate for this, you can directly control the life and death of the server using the `ChromeDriverService`:
{{{
import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import org.junit.runners.BlockJUnit4ClassRunner
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

@RunWith(BlockJUnit4ClassRunner.class)}
public class ChromeTest extends TestCase {

  private static ChromeDriverService service;
  private WebDriver driver;

  @BeforeClass
  public static void createAndStartService() {
    service = new ChromeDriverService.Builder()
        .usingChromeDriverExecutable(new File("path/to/my/chromedriver"))
        .usingAnyFreePort()
        .build();
    service.start();
  }

  @AfterClass
  public static void createAndStopService() {
    service.stop();
  }

  @Before
  public void createDriver() {
    driver = new RemoteWebDriver(service.getUrl(),
        DesiredCapabilities.chrome());
  }

  @After
  public void quitDriver() {
    driver.quit();
  }

  @Test
  public void testGoogleSearch() {
    driver.get("http://www.google.com");
    WebElement searchBox = driver.findElement(By.name("q"));
    searchBox.sendKeys("webdriver");
    searchBox.quit();
    assertEquals("webdriver - Google Search", driver.getTitle());
  }
}
}}}

=== Running the server as a standalone process ===

Since the !ChromeDriver implements the wire protocol, it is fully compatible with any RemoteWebDriver client. Simply start up your server, create a client, and away you go:
{{{
WebDriver driver = new RemoteWebDriver("http://localhost:9515", DesiredCapabilities.chrome());
driver.get("http://www.google.com");
}}}

== Advanced Usage ==

=== Starting Chromium with Specific Flags ===

The !ChromeDriver can be made to start the browser with specific command line flags using the `chrome.switches` capability key; this key should define a list of command line flags that should be passed to the browser on start-up.  For example, to start Chrome as a maximized window:
{{{
  DesiredCapabilities capabilities = DesiredCapabilities.chrome();
  capabilities.setCapability("chrome.switches", Arrays.asList("--start-maximized"));
  WebDriver driver = new ChromeDriver(capabilities);
}}}

Similarly, to load an extension when Chrome starts:
{{{
  DesiredCapabilities capabilities = DesiredCapabilities.chrome();
  capabilities.setCapability("chrome.switches", Arrays.asList("--load-extension=/path/to/extension/directory"));
  WebDriver driver = new ChromeDriver(capabilities);
}}}

Or to load with a specific profile (note that the default profile directories can be found [http://www.chromium.org/user-experience/user-data-directory here]):
{{{
  DesiredCapabilities capabilities = DesiredCapabilities.chrome();
  capabilities.setCapability("chrome.switches", Arrays.asList("--user-data-dir=/path/to/profile/directory"));
  WebDriver driver = new ChromeDriver(capabilities);
}}}

The full list of flags can be found [http://peter.sh/experiments/chromium-command-line-switches/ here].

== Known Issues ==

There are a handful of known issues with !ChromeDriver, listed below:

  # Can only retrieve the name and value of set cookies (no domain, path, etc.)
  # Typing does not work with rich-text enabled documents
  # Cannot specify a custom profile
  # [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/remote/html5/package-summary.html HTML 5 API] not implemented
  # [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/package-summary.html Advanced user interactions API] not implemented

=== Think you've found a bug? ===

Check if the bug has been [http://code.google.com/p/selenium/issues/list reported] yet.  If it hasn't, please open a new issue and be sure to include the [SeleniumHelp following]:

 * What platform are you running on?
 * What version of the chromedriver are you using?
 * What version of Chrome are you using?
 * The failure stacktrace, if available.
 * The contents of chromedriver's log file (chromedriver.log).

Of course, if your bug has already been reported, you can update the issue with the information above.  Having more information to work on makes it easier for us to track down the cause of the bug.

== Testing earlier versions of Chrome ==

As previously mentioned, the !ChromeDriver is only compatible with Chrome version 12.0.712.0 or newer.  If you need to test an older version of Chrome, use Selenium RC  and a Selenium-backed WebDriver instance:
{{{
URL seleniumServerUrl = new URL("http://localhost:4444");
URL serverUnderTest = new URL("http://www.google.com");
CommandExecutor executor = new SeleneseCommandExecutor(seleniumServerUrl, serverUnderTest, DesiredCapabilities.chrome());
WebDriver driver = new RemoteWebDriver(executor);
}}}

== Building From Source ==

The !ChromeDriver is available as part of the [http://www.chromium.org Chromium] project.  See this [http://dev.chromium.org/developers/testing/webdriver-for-chrome page] if you'd like to build the server yourself.