#summary What we're doing with the build file

= WebDriver's Build System =

<wiki:toc />

WebDriver is a large project: if we tried to push everything into a single monolithic build file it eventually becomes unmanageable. We know this. We've tried it. So we broke the single Rakefile into a series of {{{build.desc}}} files. Each of these describe a part of the build.

Let's take a look at a build.desc file. This is part of the [http://code.google.com/p/selenium/source/browse/trunk/javatests/org/openqa/selenium/build.desc main test build.desc]:

{{{
java_test(name = "single",
  srcs = [
    "SingleTestSuite.java",
  ],
  deps = [
    ":tests",
    "//java/org/openqa/selenium/server",
  ])

}}}

This highlights most of the key concepts. Firstly, it declares *target*, in this case there is a single {{{java_test}}} target. Each target has a {{{name}}} attribute.

== Target Names ==

The combination of the location of the "build.desc" file and the name are used to derive the rake tasks that are generated. All task names are prefixed with "//" followed by the path to the directory containing the "build.desc" file relative to the {{{Rakefile}}}, followed by a ":" and then the name of the target within the "build.desc". An example makes this far clearer :)

The rake task generated by this example is {{{//javatests/org/openqa/selenium:single}}}

== Short Target Names ==

As a shortcut, if a target is named after the directory containing the "build.desc" file, you can omit the part of the rake task name after the colon. In our example: {{{//java/org/openqa/selenium/server}}} is the same as {{{//java/org/openqa/selenium/server:server}}}.

== Outputs == 

Each target specified in a "build.desc" file produces one and only one output. This is important. Keep it in mind. Generally, all output files are placed in the "build" directory, relative to the rake task name. In our example, the output of "//java/org/openqa/selenium/server" would be found in "build/java/org/openqa/selenium/server.jar". Build rules should output the names and locations of any files that they generate.

== Dependencies ==

Take a look at the "deps" section of the "single" target above. The {{{":tests"}}} is a reference to a target in the current "build.desc" file, in this case, it's a "java_library" target immediately above. You'll also see that there's a reference to several full paths. For example {{{"//java/org/openqa/selenium/server"}}} This refers to another target defined in a crazy fun build.desc file.

= Build Targets = 

Being a brief description of the available targets that you can use.

== Common Attributes ==

The following attributes are required for all build targets:

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || Used to derive the rake target and (often) the name of the generated binary ||

The following attributes are commonly used:

|| *Attribute Name* || *Type* || *Meaning* ||
|| srcs || array || The raw source to be build for this target ||
|| deps || array || Prerequisites of this target ||

== java_library ==

  * *Output:* JAR file named after the "name" attribute if the "srcs" attribute is set.
  * *Implicit Targets:* run (if "main" attribute specifiec), project, project-srcs, uber, zip
  * *Required Attributes:* "name" and at least one of "srcs" or "deps".

|| *Attribute Name* || *Type* || *Meaning* ||
|| deps || array || As above ||
|| srcs || array || As above ||
|| resources || array || Any resources that should be copied into the jar file. ||
|| main || string || The full classname of the main class of the jar (used for creating executable jars) ||
  
== java_test ==

  * *Output:* JAR file named after the "name" attribute if the "srcs" attribute is set.
  * *Implicit Targets:* run, project, project-srcs, uber, zip
  * *Required Attributes:* "name" and at least one of "srcs" or "deps".

|| *Attribute Name* || *Type* || *Meaning* ||
|| deps || array || As above. ||
|| srcs || array || As above. ||
|| resources || array || Any resources that should be copied into the jar file. ||
|| main || string || The alternative class to use for running these tests. ||
|| args || string || The argument line to pass to the main class ||
|| sysproperties || array || An array of maps containing System properties that should be set ||

== js_deps ==

  * *Output:* Marker file to indicate task is up to date.
  * *Implicit Targets:* None
  * *Required Attributes:* "name" and "srcs"

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || As above ||
|| srcs || array || As above ||
|| deps || array || As above ||

== js_binary ==

  * *Output:* A monolithic JS file containing all dependencies and sources compiled using the closure compiler without optimizations.
  * *Implicit Targets:* None
  * *Required Attributes:* At least one of srcs or deps.

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || As above ||
|| srcs || array || As above ||
|| deps || array || As above ||

== js_fragment ==

  * *Output:* Source of an anonymous function representing the exported function, compiled by the closure compiler with all optimizations turned on.
  * *Implicit Targets:* None
  * *Required Attributes:* name, module, function, deps

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || As above ||
|| module || string || The name of the module containing the function ||
|| function || string || The full name of the function to export ||
|| deps || array || As above ||

== js_fragment_header ==

  * *Output:* A C header file with all js_fragment dependencies declared as constants.
  * *Implicit Targets:* None
  * *Required Attributes:* name, deps

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || As above ||
|| srcs || array || As above ||
|| deps || array || As above ||

== rake_task ==

  * *Output:* A crazy fun build rule that can be referred to "blow the escape" hatch and use ordinary rake targets.
  * *Implicit Targets:* None
  * *Required Attributes:* name, task_name, out.

|| *Attribute Name* || *Type* || *Meaning* ||
|| name || string || As above ||
|| task_name || string || The ordinary rake target to call ||
|| out || string || The file that is generated, relative to the Rakefile ||
