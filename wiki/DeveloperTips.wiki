#summary Information on how to work on the WebDriver codebase.
#labels WebDriver

= Developer Tips =

== Running an Individual Test ==

When developing WebDriver, it is common to want to run a single test rather than the entire test suite for a particular driver. In order to do this, open the {{{SingleTestSuite}}} class. There are some key fields that you may comment out (or include!):

|| *Method Name* || *What It Means* ||
|| addSourceDir || Adds a source directory relative to the root of trunk (that is, the directory containing the Rakefile) ||
|| usingDriver || Takes the fully qualified name of the driver class. This class must have a no-arg constructor and must implement the WebDriver interface ||
|| keepDriverInstance || Without this method, a new instance of the chosen driver will be instantiated per-test ||
|| onlyRun || The class name (not fully qualified) of the TestCase to run ||
|| method || The name of a particular method within the TestCase given by "onlyRun" ||

You can also run a single test directly from the command line by typing:
./go test_firefox method=foo

== Using Rake ==

Rake is very similar to using other build tools such as "make" or "ant". You can specify a "target" to run by adding it as a parameter, and you can add more than one target at a time. Note that since WebDriver does not rely on ruby being installed and uses JRuby, rake should *not* be involved directly - use the _go_ script instead. For example, in order to clean the build and then build and run the HtmlUnitDriver tests:

{{{
./go clean test_htmlunit
}}}

The default target that's used will compile the code and run all the tests. More interesting targets are:

|| *Target* || *Description* ||
|| clean || Delete the contents of the build directory, removing all compiled artifacts ||
|| test || Compile the dependencies of and run all the tests for the HtmlUnitDriver, FirefoxDriver, and InternetExplorerDriver as well as the support library's tests ||
|| firefox || Compile the FirefoxDriver ||
|| htmlunit || Compile the HtmlUnitDriver ||
|| ie || Compile the InternetExplorerDriver. This won't compile the C++ on a non-Windows system, but will always compile the Java, no matter which OS you happen to be using ||
|| support || Guess what this does :) ||
|| test_htmlunit || Compile the dependencies and then run the tests for the HtmlUnitDriver. The same "test_x" pattern can be followed for all the compilation targets in this table. ||

== Debugging the Firefox Driver ==
=== Getting output from the Firefox process itself ===
This is usually useful to debug issues with Firefox starting up. The Java system property `webdriver.firefox.logfile` will instruct the FirefoxDriver to redirect the output to a file:
{{{
java -Dwebdriver.firefox.logfile=/dev/stdout -cp selenium-2.jar <sometest>
}}}

=== Outputting to the Error Console ===
A common technique used for debugging of the Firefox driver extension is debug statements. The two following methods can be used from almost any Javascript code inside the extension:
 * `Logger.dumpn()` - Logs a string into console (and converts arguments to strings). For example: `Logger.dumpn("Found element: " + node)`.
 * `Logger.dump()` - Gets a single argument, an object, and dumps its entire contents: implemented interfaces, data fields, methods, etc. 

=== Getting output from the error console to a file ===
To see output generated using the `Logger` utility, one has to open up Firefox's error console - difficult or simply impossible on remote machines. Fortunately, there's a way to get the contents of the output dumped to a file:
{{{
FirefoxProfile p = new FirefoxProfile();
p.setPreference("webdriver.log.file", "/tmp/firefox_console");
WebDriver driver = new FirefoxDriver(p);
...
}}}
The `webdriver.log.file` preference will instruct the `Logger` to dump all contents of the console to the specified file.
webdriver.log.file
=== Getting even more output to the command line ===
When suspecting additional logging from Firefox could be beneficial, one can crank debugging level all the way up:
{{{
export NSPR_LOG_MODULES=all:3
}}}
Setting this environment variable will cause Firefox to log additional messages to the console. Use this environment variable together with `webdriver.firefox.logfile` to get a hold of Firefox's output to the console.