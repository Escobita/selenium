#summary Details of the official Selenium documentation
#labels Featured

The official documentation for Selenium can be found at http://seleniumhq.org/docs/

= Getting Involved =

== Basic knowledge ==
Be sure to understand chapter 1 "Fundamental Concepts" of the [http://svnbook.red-bean.com/en/1.5/svn-book.pdf SVN book].

== Subversion client ==

For non-developers: The recommended way is to install a GUI client.
Windows users should probably start with the free
[http://tortoisesvn.tigris.org/ Tortoise SVN].  If you are using Mac
OS X, you may wish to purchase [http://versionsapp.com/ Versions].

For developers: Mac OS X and many Linux distros, ship with a fine SVN
command-line client.  Linux users who don't have an `svn` command, can
install it using a package manager such as Apt or Yum.  Windows
developers have a few choices, but may wish to try
[http://www.sliksvn.com/en/download/ the Slik SVN command-line client.] 
Windows users should also be aware that the Cygwin SVN client
is _not_ recommended at this time.

== Repository ==
According to your interest/profile choose one the following two URLs to be used for checkout in the Subversion client of your choice

Only working on the RST files: http://selenium.googlecode.com/svn/websites/www.seleniumhq.org/src/main/rst/

Also working on the website: http://selenium.googlecode.com/svn/websites/www.seleniumhq.org/

== Access ==
In order to be able to commit you need an Google account with the appropriate privileges - if you don't have one already and you're part of the team contact Patrick Lightbody.

== Working process ==
 * Communicate to the others what your plans are and what you're currently working on to be synchronized with other team members
 * Try to avoid huge reformatting/restructuring to reduce merge effort
 * Update regularly to always be on the bleeding edge and to be able to review others' changes
 * Commit only changes you're satisfied with i.e. take a look over your changes prior to submitting them to the repository

== Documentation markup language ==
We use reStructured Text for structuring and shaping the documentation, therefore it is required to know the basics of it by reading

 * http://jrst.labs.libre-entreprise.org/jrst/en/user/RSTpresentation.html (shorter, concise)
 * http://docutils.sourceforge.net/docs/user/rst/quickref.html(short, with lots of examples)
 * http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html (longer, more advanced)

== Local machine parsing using Sphinx ==
The RST files written by the team are parsed using Sphinx, a python documentation tool that takes care of the styling and superficial stuff. To do this manually, you must first install Sphinx (which also needs python)

=== Install Python ===
Already installed on most `*`NIX, and on Mac OS X. Grab the installer from http://python.org/download/ if you use Windows.

  Notice: the version of python recommended to install is 2.5.x (latest setuptools windows installer is for version 2.5)

=== Install setuptools ===

Setuptools is a package manager for Python. Installing setuptools will
allow you to use `easy_install` on the next step.

Get the installer from http://pypi.python.org/pypi/setuptools

=== Install Sphinx ===
Run the following on a terminal (you may need to `sudo`):

{{{
    easy_install Sphinx
}}}

=== Generate the docs ===
Finally, to generate the docs. All you have to do is run this on a terminal:

{{{
   sphinx-build -b html <rest_files_location> <html_destination>
}}}

That's it, you should find the files on the html_destination you've chosen (open index.html to see the docs).

Note that the HTML will be generated without any CSS.

==== Using Make (optional) ====

If you have Make installed on your system, go to
`websites/www.seleniumhq.org/src/main/rst` and type `make` You will
then see a list of available build targets for the Selenium docs.  For
details, say `cat Makefile`

Assuming you're in the `rst` directory, you can build the HTML
documentation with `make html` The output will be placed in
`rst/.build/html`

If you'd like to generate the PDF version of the Selenium
documentation, use the following incantation:

{{{
    make latex
    cd .build/latex
    make all-pdf
    cd -
}}}

The final PDF output will be a file named `rst/.build/latex/Selenium_Documentation.pdf`

===== Checking for broken links =====

One of the available Make targets is `linkcheck` If you run `make linkcheck` 
then Sphinx will validate all of the links in the document,
and let you know if any links are malformed, or point to dead URLs.
Note that checking all the links does take a while.

== Some rules ==

Here you'll find some rules we must follow to keep the documentation source files as clean as possible.

 # Try to keep lines of no more that 80 columns, this way most text editors will be able to render the rst file in the same way, and will save us the annoyance of unending lines. The final html will be rendered as espected as the parser joins all consecutive lines to a single paragraph until the next blank line.
 # Don't add extra spaces. The parser removes duplicated spaces anyway, but it's better to keep the source rst files as clean as possible.
 # Don't use unicode characters, like ¶ ñ á or even  and  (double dashes). They sometimes are parsed correctly, but in some environment they don't, which brings more problems than advantages...

== Style Conventions ==
Most of this is simply lifted from the Python documentation.

 # Use italics when defining a new term for the first time.
 # Capitalize and hyphenate each of the Selenium components:  Selenium-IDE, Selenium-RC, Selenium-Grid, Selenium-Core. Additionally, "Selenium" should be spelled out in full and not abbreviated to "Sel" in the official documentation.
 # JavaScript should be spelt with CamelCase, i.e. capital 'J' capital 'S.'
 # URLs, file directories, file names, and selenium commands written inline should be monospaced using {{{``}}}mono{{{``}}}
 # Code Snippets should be prefaced with ".. code-block:: {{{<}}}language{{{>}}}" where {{{<}}}language{{{>}}} is the programming language
 # Command line input and output should be a block, indented and prefaced with two colons. See the end of the Selenium-RC chapter for reference.
 # Linux command line should be a code block prefaced with ".. code-block:: bash"

== Tips ==

=== Text highlighting ===
You can apply certain style to text, just by putting some marks on it, here are some examples: `**`bold`**`, `*`italics`*`, {{{``}}}monospaced text{{{``}}}.

=== Links ===
To make links you have 4 alternatives:

 # Easy but cluttered way: {{{`Text linking <http://url.linked.com>`_}}}
 # Common way: {{{`Text linking`_}}} then you can write more text and you can call the link anywhere you want like now {{{`Text linking`_}}} Then, when you have some free space, you can write the target to that link (see the end of the file for the target linking).
 # Titles are link targets also! All you have to do is put the title followed with an underscore like in {{{`Some rules`_}}} or `Tips_`
 # Links within the documentation but on other pages can be created by using the `:ref:` syntax. First, create a reference to the section you want by putting `.. _sectionName-reference:` just before the text. There are three important parts to this: The ".." at the beginning tells Sphinx not to display the output, the underscore denotes this is a reference (similar to method 3) and the colon (:) tells Sphinx that the following content is being referenced. Then, to create the link write {{{:ref:`Section Title <sectionName-reference>`}}} "Section Title" will be displayed in the output and linked to the section named.
   
=== Further reading ===
Off course, the next point to go from here if you find any problems is: http://docutils.sourceforge.net/docs/user/rst/quickref.html or http://sphinx.pocoo.org/rest.html