#summary A description of the protocol used by WebDriver to communicate with remote instances
#labels WebDriver

<font size=6>*The !WebDriver Wire Protocol*</font>

<font size=3>*Status:* _DRAFT_</font>

<wiki:toc max_depth="3" />

= Introduction =

All implementations of WebDriver that communicate with the browser, or a RemoteWebDriver server shall use a common wire protocol. This wire protocol defines a [http://www.google.com?q=RESTful+web+service RESTful web service] using [http://www.json.org JSON] over HTTP.

The protocol will assume that the WebDriver API has been "flattened", but there is an expectation that client implementations will take a more Object-Oriented approach, as demonstrated in the existing Java API. The wire protocol is implemented in request/response pairs of "commands" and "responses".

== Basic Concepts And Terms ==

<dl>
<dt>*Client*</dt>
<dd>The machine on which the WebDriver API is being used.

</dd>
<dt>*Server*</dt>
<dd>The machine running the RemoteWebDriver. This term may also refer to a specific browser that implements the wire protocol directly, such as the FirefoxDriver or IPhoneDriver.

</dd>
<dt>*Session*</dt>
<dd>The server should maintain one browser per session. Commands sent to a session will be directed to the corresponding browser.

</dd>
<dt>*!WebElement*</dt>
<dd>An object in the WebDriver API that represents a DOM element on the page.

</dd>
<dt>*!WebElement JSON Object*</dt>
<dd>The JSON representation of a WebElement for transmission over the wire. This object will have the following properties:

|| *Key* || *Type* || *Description* ||
|| ELEMENT || string || The opaque ID assigned to the element by the server. This ID should be used in all subsequent commands issued against the element. ||

</dd>
</dl>

= Messages =

== Commands ==

!WebDriver command messages should conform to the [http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5 HTTP/1.1 request specification]. Although the server may be extended to respond to other content-types, the wire protocol dictates that all commands accept a content-type of `application/json;charset=UTF-8`. Likewise, the message bodies for POST and PUT request must use an `application/json;charset=UTF-8` content-type.

Each command in the WebDriver service will be mapped to an HTTP method at a specific path. Path segments prefixed with a colon (:) indicate that segment is a variable used to further identify the underlying resource. For example, consider an arbitrary resource mapped as:
{{{
GET /favorite/color/:name
}}}
Given this mapping, the server should respond to GET requests sent to "/favorite/color/Jack" and "/favorite/color/Jill", with the variable `:name` set to "Jack" and "Jill", respectively.

== Responses ==

Command responses shall be sent as [http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6 HTTP/1.1 response messages]. If the remote server must return a 4xx response, the response body shall have a Content-Type of text/plain and the message body shall be a descriptive message of the bad request. For all other cases, if a response includes a message body, it must have a Content-Type of application/json;charset=UTF-8 and will be a JSON object with the following properties:

|| *Key* || *Type* || *Description* ||
|| sessionId || string|null || An opaque handle used by the server to determine where to route session-specific commands. This ID should be included in all future session-commands in place of the :sessionId path segment variable. ||
|| status || number || A status code summarizing the result of the command. A non-zero value indicates that the command failed. ||
|| value || `*` || The response JSON value. ||

=== Response Status Codes ===

The wire protocol will inherit its status codes from those used by the InternetExplorerDriver:

|| *Code* || *Summary* || *Detail* ||
|| 0 || Success || The command executed successfully. ||
|| 7 || No such element || An element could not be located on the page using the given search parameters. ||
|| 8 || No such frame || A request to switch to a frame could not be satisfied because the frame could not be found. ||
|| 9 || Unknown command || The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource. ||
|| 10 || Stale element reference || An element command failed because the referenced element is no longer attached to the DOM. ||
|| 11 || Element not visible || An element command could not be completed because the element is not visible on the page. ||
|| 12 || Invalid element state || An element command could not be completed because the element is in an invalid state (e.g. attempting to click a disabled element). ||
|| 13 || Unknown error || An unknown server-side error occurred while processing the command. ||
|| 15 || Element is not selectable || An attempt was made to select an element that cannot be selected. ||
|| 19 || XPath look up error || An error occurred while searching for an element by XPath. ||
|| 23 || No such window || A request to switch to a different window could not be satisfied because the window could not be found. ||
|| 24 || Invalid cookie domain || An illegal attempt was made to set a cookie under a different domain than the current page. ||
|| 25 || Unable to set cookie || A request to set a cookie's value could not be satisfied. ||

The client should interpret a 404 Not Found response from the server as an "Unknown command" response. All other 4xx and 5xx responses from the server that do not define a status field should be interpreted as "Unknown error" responses.

== Error Handling ==

There are two levels of error handling specified by the wire protocol: invalid requests and failed commands.

=== Invalid Requests ===

All invalid requests should result in the server returning a 4xx HTTP response. The response Content-Type should be set to text/plain and the message body should be a descriptive error message. The categories of invalid requests are as follows:

<dl>
<dt>*Unknown Commands*</dt>
<dd>If the server receives a command request whose path is not mapped to a resource in the REST service, it should respond with a `404 Not Found` message.

</dd>
<dt>*Unimplemented Commands*</dt>
<dd>Every server implementing the WebDriver wire protocol must respond to every defined command. If an individual command has not been implemented on the server, the server should respond with a `501 Not Implemented` error message. Note this is the only error in the Invalid Request category that does not return a `4xx` status code.

</dd>
<dt>*Variable Resource Not Found*</dt>
<dd>If a request path maps to a variable resource, but that resource does not exist, then the server should respond with a `404 Not Found`. For example, if ID `my-session` is not a valid session ID on the server, and a command is sent to `GET /session/my-session HTTP/1.1`, then the server should gracefully return a `404`.

</dd>
<dt>*Invalid Command Method*</dt>
<dd>If a request path maps to a valid resource, but that resource does not respond to the request method, the server should respond with a `405 Method Not Allowed`. The response must include an Allows header with a list of the allowed methods for the requested resource.

</dd>
<dt>*Missing Command Parameters*</dt>
<dd>If a POST/PUT command maps to a resource that expects a set of JSON parameters, and the response body does not include one of those parameters, the server should respond with a `400 Bad Request`. The response body should list the missing parameters.

</dd>
</dl>

=== Failed Commands ===

If a request maps to a valid command and contains all of the expected parameters in the request body, yet fails to execute successfully, then the server should send a 500 Internal Server Error. This response should have a Content-Type of `application/json;charset=UTF-8` and the response body should be a well formed JSON response object.

The response status should be one of the defined status codes and the response value should be another JSON object with detailed information for the failing command:

|| Key || Type || Description ||
|| message || string || A descriptive message for the command failure. ||
|| screen || string || (Optional) If included, a screenshot of the current page as a base64 encoded string. ||
|| class || string || (Optional) If included, specifies the fully qualified class name for the exception that was thrown when the command failed. ||
|| stackTrace || array || (Optional) If included, specifies an array of JSON objects describing the stack trace for the exception that was thrown when the command failed. The zeroeth element of the array represents the top of the stack. ||

Each JSON object in the stackTrace array must contain the following properties:

|| *Key* || *Type* || *Description* ||
|| fileName || string || The name of the source file containing the line represented by this frame. ||
|| className || string || The fully qualified class name for the class active in this frame. If the class name cannot be determined, or is not applicable for the language the server is implemented in, then this property should be set to the empty string. ||
|| methodName || string || The name of the method active in this frame, or the empty string if unknown/not applicable. ||
|| lineNumber || number || The line number in the original source file for the frame, or 0 if unknown. ||

= Resource Mapping =

Resources in the WebDriver REST service are mapped to individual URL patterns. Each resource may respond to one or more HTTP request methods. If a resource responds to a GET request, then it should also respond to HEAD requests. All resources should respond to OPTIONS requests with an `Allow` header field, whose value is a list of all methods that resource responds to.

If a resource is mapped to a URL containing a variable path segment name, that path segment should be used to further route the request. Variable path segments are indicated in the resource mapping by a colon-prefix. For example, consider the following:
{{{
/favorite/color/:person
}}}
A resource mapped to this URL should parse the value of the `:person` path segment to further determine how to respond to the request. If this resource received a request for `/favorite/color/Jack`, then it should return Jack's favorite color. Likewise, the server should return Jill's favorite color for any requests to `/favorite/color/Jill`.

Two resources may only be mapped to the same URL pattern if one of those resources' patterns contains variable path segments, and the other does not. In these cases, the server should always route requests to the resource whose path is the best match for the request. Consider the following two resource paths:

  # `/session/:sessionId/element/active`
  # `/session/:sessionId/element/:id`

Given these mappings, the server should always route requests whose final path segment is active to the first resource. All other requests should be routed to second.

= Command Reference =

== Command Summary ==

|| *HTTP Method* || *Path* || *Summary* || *Java Equivalent* ||
|| POST || /session || Create a new session. || _N/A_ ||
|| GET || /session/:sessionId || Retrieve the capabilities of the specified session. || _N/A_ ||
|| DELETE || /session/:sessionId || Delete the session. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#quit() WebDriver#quit()] ||
|| POST || /session/:sessionId/timeouts/implicit_wait || Set the amount of time the driver should wait when searching for elements. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Timeouts.html#implicitlyWait(long,%20java.util.concurrent.TimeUnit) WebDriver.Timeouts#implicitlyWait(long, TimeUnit)] ||
|| GET || /session/:sessionId/window_handle || Retrieve the current window handle. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getWindowHandle() WebDriver#getWindowHandle()] ||
|| GET || /session/:sessionId/window_handles || Retrieve the list of all window handles available to the session. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getWindowHandles() WebDriver#getWindowHandles()] ||
|| GET || /session/:sessionId/url || Retrieve the URL of the current page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getCurrentUrl() WebDriver#getCurrentUrl()] ||
|| POST || /session/:sessionId/url || Navigate to a new URL. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#get(java.lang.String) WebDriver#get(String)] ||
|| POST || /session/:sessionId/forward || Navigate forwards in the browser history, if possible. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#forward() WebDriver.Navigation#forward()] ||
|| POST || /session/:sessionId/back || Navigate backwards in the browser history, if possible. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#back() WebDriver.Navigation#back()] ||
|| POST || /session/:sessionId/refresh || Refresh the current page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#refresh() WebDriver.Navigation#refresh()] ||
|| POST || /session/:sessionId/execute || Inject a snippet of !JavaScript into the page and return its result. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript(java.lang.String,%20java.lang.Object...) JavascriptExecutor#executeScript(String, Object...)] ||
|| GET || /session/:sessionId/screenshot || Take a screenshot of the current page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TakesScreenshot.html#getScreenshotAs(org.openqa.selenium.OutputType) TakesScreenshot#getScreenshotAs(OutputType)] ||
|| POST || /session/:sessionId/frame || Change focus to another frame on the page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#frame(java.lang.String) WebDriver.TargetLocator#frame(String)] ||
|| POST || /session/:sessionId/window || Change focus to another window. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#window(java.lang.String) WebDriver.TargetLocator#window(String)] ||
|| DELETE || /session/:sessionId/window || Close the current window. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#close() WebDriver#close()] ||
|| GET || /session/:sessionId/speed || Get the current user input speed. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getSpeed() WebDriver.Options#getSpeed()] ||
|| POST || /session/:sessionId/speed || Set the user input speed. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#setSpeed(org.openqa.selenium.Speed) WebDriver.Options#setSpeed(Speed)] ||
|| GET || /session/:sessionId/cookie || Retrieve all cookies visible to the current page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getCookies() WebDriver.Options#getCookies()] ||
|| POST || /session/:sessionId/cookie || Set a cookie. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#addCookie(org.openqa.selenium.Cookie) WebDriver.Options#addCookie(Cookie)] ||
|| DELETE || /session/:sessionId/cookie || Delete all cookies visible to the current page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#deleteAllCookies() WebDriver.Options#deleteAllCookies()] ||
|| DELETE || /session/:sessionId/cookie/:name || Delete the cookie with the given name. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getCookieNamed(java.lang.String) WebDriver.Options#deleteCookieNamed(String)] ||
|| GET || /session/:sessionId/source || Get the current page source. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getPageSource() WebDriver#getPageSource()] ||
|| GET || /session/:sessionId/title || Get the current page title. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getTitle() WebDriver#getTitle()] ||
|| POST || /session/:sessionId/element || Search for an element on the page, starting from the document root. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#findElement(org.openqa.selenium.By) WebDriver.#findElement(By)] ||
|| POST || /session/:sessionId/elements || Search for multiple elements on the page, starting from the document root. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#findElements(org.openqa.selenium.By) WebDriver.#findElements(By)] ||
|| POST || /session/:sessionId/element/active || Get the element on the page that currently has focus. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#activeElement() WebDriver.TargetLocator#activeElement()] ||
|| GET || /session/:sessionId/element/:id || Describe the identified element. || _N/A_ ||
|| POST || /session/:sessionId/element/:id/element || Search for an element on the page, starting from the identified element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#findElement(org.openqa.selenium.By) WebElement#findElement(By)] ||
|| POST || /session/:sessionId/element/:id/elements || Search for multiple elements on the page, starting from the identified element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#findElements(org.openqa.selenium.By) WebElement#findElements(By)] ||
|| POST || /session/:sessionId/element/:id/click || Click on an element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#click() WebElement#click()] ||
|| POST || /session/:sessionId/element/:id/submit || Submit a `FORM` element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#submit() WebElement#submit()] ||
|| GET || /session/:sessionId/element/:id/text || Get the `innerText` of the element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getText() WebElement#getText()] ||
|| GET || /session/:sessionId/element/:id/value || Query for the value of an element, as determined by its `value` attribute. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getValue() WebElement#getValue()] ||
|| POST || /session/:sessionId/element/:id/value || Send a sequence of key strokes to an element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#sendKeys(java.lang.CharSequence...) WebElement#sendKeys(CharSequence...)] ||
|| GET || /session/:sessionId/element/:id/name || Query for an element's tag name. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getTagName() WebElement#getTagName()] ||
|| POST || /session/:sessionId/element/:id/clear || Clear a `TEXTAREA` or `text INPUT` element's value. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#clear() WebElement#clear()] ||
|| GET || /session/:sessionId/element/:id/selected || Determine if an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton` is currently selected. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#isSelected() WebElement#isSelected()] ||
|| POST || /session/:sessionId/element/:id/selected || Select an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton`. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#setSelected() WebElement#setSelected()] ||
|| POST || /session/:sessionId/element/:id/toggle || Toggle whether an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton` is currently selected. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#toggle() WebElement#toggle()] ||
|| GET || /session/:sessionId/element/:id/enabled || Determine if an element is currently enabled. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#isEnabled() WebElement#isEnabled()] ||
|| GET || /session/:sessionId/element/:id/attribute/:name || Get the value of an element's attribute. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getAttribute(java.lang.String) WebElement#getAttribute(String)] ||
|| GET || /session/:sessionId/element/:id/equals/:other || Test if two element IDs refer to the same DOM element. || _N/A_ ||
|| GET || /session/:sessionId/element/:id/displayed || Determine if an element is currently displayed. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#isDisplayed() RenderedWebElement#isDisplayed()] ||
|| GET || /session/:sessionId/element/:id/location || Determine an element's location on the page. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getLocation() RenderedWebElement#getLocation()] ||
|| GET || /session/:sessionId/element/:id/location_in_view || Determine an element's location on the screen once it has been scrolled into view. || _N/A_ ||
|| GET || /session/:sessionId/element/:id/size || Determine an element's size in pixels. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getSize() RenderedWebElement#getSize()] ||
|| GET || /session/:sessionId/element/:id/css/:propertyName || Query the value of an element's computed CSS property. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getValueOfCssProperty(java.lang.String) RenderedWebElement#getValueOfCssProperty(String)] ||
|| POST || /session/:sessionId/element/:id/hover || Move the mouse over an element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#hover() RenderedWebElement#hover()] ||
|| POST || /session/:sessionId/element/:id/drag || Drag and drop an element. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#dragAndDropBy(int,%20int) RenderedWebElement#dragAndDropBy(int, int)] ||
|| GET || /session/:sessionId/orientation || Get the current browser orientation. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html#getOrientation() Rotatable#getOrientation()] ||
|| POST || /session/:sessionId/orientation || Set the browser orientation. || [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html#rotate(org.openqa.selenium.ScreenOrientation) Rotatable#rotate(ScreenOrientation orientation)] ||

== Command Detail ==

=== /session ===

<dl>
<dd>*POST /session*</dd>
<dd>
<dl>
<dd>
Create a new session. The desired capabilities should be specified in a JSON
object with the following properties:

|| *Key* || *Type* || *Description* ||
|| browserName || string || The name of the browser to use; should be one of `{iphone|firefox|internet explorer|htmlunit|iphone|chrome}`||
|| version || string || The desired browser version. ||
|| javascriptEnabled || boolean || Whether the session should support !JavaScript. ||
|| platform || string || A key specifying the desired platform to launch the browser on. Should be one of `{WINDOWS|XP|VISTA|MAC|LINUX|UNIX|ANY}` ||

The server should attempt to create a session that most closely matches the desired capabilities.</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`desiredCapabilities` - `{object}` A JSON object describing the desired capabilities for the new session.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>A `303 See Other` redirect to `/session/:sessionId`, where `:sessionId` is the ID of the newly created session.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId ===

<dl>
<dd>*GET /session/:sessionId*</dd>
<dd>
<dl>
<dd>Retrieve the capabilities of the specified session. The session's capabilities
will be returned in a JSON object with the following properties:

|| *Key* || *Type* || *Description* ||
|| browserName || string || The name of the browser to use; should be one of `{iphone|firefox|internet explorer|htmlunit|iphone|chrome}`||
|| version || string || The desired browser version. ||
|| javascriptEnabled || boolean || Whether the session should support !JavaScript. ||
|| platform || string || A key specifying the desired platform to launch the browser on. Should be one of `{WINDOWS|XP|VISTA|MAC|LINUX|UNIX|ANY}` ||
|| nativeEvents || boolean || Whether the browser has native events enabled. ||

</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{object}` A JSON object with the session capabilities.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*DELETE /session/:sessionId*</dd>
<dd>
<dl>
<dd>Delete the session.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#quit() WebDriver#quit()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/timeouts/implicit_wait ===

<dl>
<dd>*POST /session/:sessionId/timeouts/implicit_wait*</dd>
<dd>
<dl>
<dd>Set the amount of time the driver should wait when searching for elements. When
searching for a single element, the driver should poll the page until an element is found or
the timeout expires, whichever occurs first. When searching for multiple elements, the driver
should poll the page until at least one element is found or the timeout expires, at which point
it should return an empty list.
      
If this command is never sent, the driver should default to an implicit wait of 0ms.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`ms` - `{number}` The amount of time to wait, in milliseconds. This value has a lower bound of 0.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Timeouts.html#implicitlyWait(long,%20java.util.concurrent.TimeUnit) WebDriver.Timeouts#implicitlyWait(long, TimeUnit)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/window_handle ===

<dl>
<dd>*GET /session/:sessionId/window_handle*</dd>
<dd>
<dl>
<dd>Retrieve the current window handle.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current window handle.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getWindowHandle() WebDriver#getWindowHandle()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/window_handles ===

<dl>
<dd>*GET /session/:sessionId/window_handles*</dd>
<dd>
<dl>
<dd>Retrieve the list of all window handles available to the session.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{Array.<string>}` A list of window handles.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getWindowHandles() WebDriver#getWindowHandles()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/url ===

<dl>
<dd>*GET /session/:sessionId/url*</dd>
<dd>
<dl>
<dd>Retrieve the URL of the current page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current URL.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getCurrentUrl() WebDriver#getCurrentUrl()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/url*</dd>
<dd>
<dl>
<dd>Navigate to a new URL.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`url` - `{string}` The URL to navigate to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#get(java.lang.String) WebDriver#get(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/forward ===

<dl>
<dd>*POST /session/:sessionId/forward*</dd>
<dd>
<dl>
<dd>Navigate forwards in the browser history, if possible.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#forward() WebDriver.Navigation#forward()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/back ===

<dl>
<dd>*POST /session/:sessionId/back*</dd>
<dd>
<dl>
<dd>Navigate backwards in the browser history, if possible.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#back() WebDriver.Navigation#back()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/refresh ===

<dl>
<dd>*POST /session/:sessionId/refresh*</dd>
<dd>
<dl>
<dd>Refresh the current page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Navigation.html#refresh() WebDriver.Navigation#refresh()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/execute ===

<dl>
<dd>*POST /session/:sessionId/execute*</dd>
<dd>
<dl>
<dd>
Inject a snippet of !JavaScript into the page and return its result.  WebElements that should be
passed to the script as an argument should be specified in the arguments array as WebElement JSON
arguments. Likewise, any !WebElements in the script result will be returned to the client as
!WebElement JSON objects.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`script` - `{string}` The script to execute.</dd>
<dd>`args` - `{Array.<*>}` The script arguments.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{*}` The script result.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript(java.lang.String,%20java.lang.Object...) JavascriptExecutor#executeScript(String, Object...)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/screenshot ===

<dl>
<dd>*GET /session/:sessionId/screenshot*</dd>
<dd>
<dl>
<dd>Take a screenshot of the current page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The screenshot as a base64 encoded PNG.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TakesScreenshot.html#getScreenshotAs(org.openqa.selenium.OutputType) TakesScreenshot#getScreenshotAs(OutputType)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/frame ===

<dl>
<dd>*POST /session/:sessionId/frame*</dd>
<dd>
<dl>
<dd>Change focus to another frame on the page. If the frame ID is `null`, the server
should switch to the page's default content.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`id` - `{string|number|null}` Identifier for the frame to change focus to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#frame(java.lang.String) WebDriver.TargetLocator#frame(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/window ===

<dl>
<dd>*POST /session/:sessionId/window*</dd>
<dd>
<dl>
<dd>Change focus to another window. The window to change focus to may be specified by its
server assigned window handle, or by the value of its `name` attribute.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`name` - `{string}` The window to change focus to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#window(java.lang.String) WebDriver.TargetLocator#window(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*DELETE /session/:sessionId/window*</dd>
<dd>
<dl>
<dd>Close the current window.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#close() WebDriver#close()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/speed ===

<dl>
<dd>*GET /session/:sessionId/speed*</dd>
<dd>
<dl>
<dd>Get the current user input speed. The server should return one of
`{SLOW|MEDIUM|FAST}`. How these constants map to actual input speed is still browser specific and
not covered by the wire protocol.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current input speed mapped to one of `{SLOW|MEDIUM|FAST}`.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getSpeed() WebDriver.Options#getSpeed()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/speed*</dd>
<dd>
<dl>
<dd>Set the user input speed. The speed should be specified as one of
`{SLOW|MEDIUM|FAST}`. How these constants map to actual input speed is still browser specific and
not covered by the wire protocol.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`speed` - `{string}` The new user input speed mapped to one of `{SLOW|MEDIUM|FAST}`.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#setSpeed(org.openqa.selenium.Speed) WebDriver.Options#setSpeed(Speed)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/cookie ===

<dl>
<dd>*GET /session/:sessionId/cookie*</dd>
<dd>
<dl>
<dd>Retrieve all cookies visible to the current page. Each cookie will be returned as a
JSON object with the following properties:

|| *Key* || *Type* || *Description* ||
|| name || string || The name of the cookie. ||
|| value || string || The cookie value. ||
|| path || string || (Optional) The cookie path.^1^ ||
|| domain || string || (Optional) The domain the cookie is visible to.^1^ ||
|| secure || boolean || (Optional) Whether the cookie is a secure cookie.^1^ ||
|| expiry || number || (Optional) When the cookie expires, specified in seconds since midnight, January 1, 1970 UTC.^1^ ||

^1^ Field should only be omitted if the server is incapable of providing the information.
</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{Array.<object>}` A list of cookies.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getCookies() WebDriver.Options#getCookies()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/cookie*</dd>
<dd>
<dl>
<dd>Set a cookie.  The cookie should be specified as a JSON object with the following
properties:

|| *Key* || *Type* || *Description* ||
|| name || string || The name of the cookie; may not be an empty string. ||
|| value || string || The cookie value; may be an empty string. ||
|| path || string || (Optional) The cookie path; defaults to `"/"`. ||
|| domain || string || (Optional) The domain the cookie is visible to; defaults to the domain of the current page. ||
|| secure || boolean || (Optional) Whether the cookie is a secure cookie; defaults to false. ||
|| expiry || number || (Optional) When the cookie expires, in seconds since midnight, January 1, 1970 UTC; if not provided, the cookie should be set to expire when the browser is closed. ||

</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`cookie` - `{object}` A JSON object defining the cookie to add.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#addCookie(org.openqa.selenium.Cookie) WebDriver.Options#addCookie(Cookie)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*DELETE /session/:sessionId/cookie*</dd>
<dd>
<dl>
<dd>Delete all cookies visible to the current page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#deleteAllCookies() WebDriver.Options#deleteAllCookies()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/cookie/:name ===

<dl>
<dd>*DELETE /session/:sessionId/cookie/:name*</dd>
<dd>
<dl>
<dd>Delete the cookie with the given name. This command should be a no-op if there is no
such cookie visible to the current page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:name` - The name of the cookie to delete.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.Options.html#getCookieNamed(java.lang.String) WebDriver.Options#deleteCookieNamed(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/source ===

<dl>
<dd>*GET /session/:sessionId/source*</dd>
<dd>
<dl>
<dd>Get the current page source.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current page source.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getPageSource() WebDriver#getPageSource()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/title ===

<dl>
<dd>*GET /session/:sessionId/title*</dd>
<dd>
<dl>
<dd>Get the current page title.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current page title.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#getTitle() WebDriver#getTitle()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element ===

<dl>
<dd>*POST /session/:sessionId/element*</dd>
<dd>
<dl>
<dd>Search for an element on the page, starting from the document root. The located element will be returned as a WebElement JSON object.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`using` - `{string}` The locator strategy to use.</dd>
<dd>`value` - `{string}` The The search target.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{ELEMENT:string}` A WebElement JSON object for the located element.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#findElement(org.openqa.selenium.By) WebDriver.#findElement(By)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/elements ===

<dl>
<dd>*POST /session/:sessionId/elements*</dd>
<dd>
<dl>
<dd>Search for multiple elements on the page, starting from the document root. The located elements will be returned as a WebElement JSON objects.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`using` - `{string}` The locator strategy to use.</dd>
<dd>`value` - `{string}` The The search target.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{Array.<{ELEMENT:string}>}` A list of WebElement JSON objects for the located elements.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html#findElements(org.openqa.selenium.By) WebDriver.#findElements(By)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/active ===

<dl>
<dd>*POST /session/:sessionId/element/active*</dd>
<dd>
<dl>
<dd>Get the element on the page that currently has focus. The element will be returned as a WebElement JSON object.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{ELEMENT:string}` A WebElement JSON object for the active element.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#activeElement() WebDriver.TargetLocator#activeElement()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id ===

<dl>
<dd>*GET /session/:sessionId/element/:id*</dd>
<dd>
<dl>
<dd>Describe the identified element.

*Note:* This command is reserved for future use; its return type is currently undefined.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to describe.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/element ===

<dl>
<dd>*POST /session/:sessionId/element/:id/element*</dd>
<dd>
<dl>
<dd>Search for an element on the page, starting from the identified element. The located element will be returned as a WebElement JSON object.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to search under.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`using` - `{string}` The locator strategy to use.</dd>
<dd>`value` - `{string}` The The search target.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{ELEMENT:string}` A WebElement JSON object for the located element.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#findElement(org.openqa.selenium.By) WebElement#findElement(By)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/elements ===

<dl>
<dd>*POST /session/:sessionId/element/:id/elements*</dd>
<dd>
<dl>
<dd>Search for multiple elements on the page, starting from the identified element. The located elements will be returned as a WebElement JSON objects.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to search under.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`using` - `{string}` The locator strategy to use.</dd>
<dd>`value` - `{string}` The The search target.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{Array.<{ELEMENT:string}>}` A list of WebElement JSON objects for the located elements.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#findElements(org.openqa.selenium.By) WebElement#findElements(By)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/click ===

<dl>
<dd>*POST /session/:sessionId/element/:id/click*</dd>
<dd>
<dl>
<dd>Click on an element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#click() WebElement#click()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/submit ===

<dl>
<dd>*POST /session/:sessionId/element/:id/submit*</dd>
<dd>
<dl>
<dd>Submit a `FORM` element. The submit command may also be applied to any element that is a descendant of a `FORM` element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#submit() WebElement#submit()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/text ===

<dl>
<dd>*GET /session/:sessionId/element/:id/text*</dd>
<dd>
<dl>
<dd>Get the `innerText` of the element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getText() WebElement#getText()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/value ===

<dl>
<dd>*GET /session/:sessionId/element/:id/value*</dd>
<dd>
<dl>
<dd>Query for the value of an element, as determined by its `value` attribute.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string|null}` The element's value, or `null` if it does not have a `value` attribute.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getValue() WebElement#getValue()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/element/:id/value*</dd>
<dd>
<dl>
<dd>Send a sequence of key strokes to an element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`value` - `{Array.<string>}` The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#sendKeys(java.lang.CharSequence...) WebElement#sendKeys(CharSequence...)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/name ===

<dl>
<dd>*GET /session/:sessionId/element/:id/name*</dd>
<dd>
<dl>
<dd>Query for an element's tag name.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The element's tag name, as a lowercase string.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getTagName() WebElement#getTagName()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/clear ===

<dl>
<dd>*POST /session/:sessionId/element/:id/clear*</dd>
<dd>
<dl>
<dd>Clear a `TEXTAREA` or `text INPUT` element's value.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#clear() WebElement#clear()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/selected ===

<dl>
<dd>*GET /session/:sessionId/element/:id/selected*</dd>
<dd>
<dl>
<dd>Determine if an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton` is currently selected.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{boolean}` Whether the element is selected.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#isSelected() WebElement#isSelected()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/element/:id/selected*</dd>
<dd>
<dl>
<dd>Select an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton`.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#setSelected() WebElement#setSelected()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/toggle ===

<dl>
<dd>*POST /session/:sessionId/element/:id/toggle*</dd>
<dd>
<dl>
<dd>Toggle whether an `OPTION` element, or an `INPUT` element of type `checkbox` or `radiobutton` is currently selected.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{boolean}` Whether the element is selected after toggling its state.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#toggle() WebElement#toggle()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/enabled ===

<dl>
<dd>*GET /session/:sessionId/element/:id/enabled*</dd>
<dd>
<dl>
<dd>Determine if an element is currently enabled.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{boolean}` Whether the element is enabled.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#isEnabled() WebElement#isEnabled()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/attribute/:name ===

<dl>
<dd>*GET /session/:sessionId/element/:id/attribute/:name*</dd>
<dd>
<dl>
<dd>Get the value of an element's attribute.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string|null}` The value of the attribute, or null if it is not set on the element.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getAttribute(java.lang.String) WebElement#getAttribute(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/equals/:other ===

<dl>
<dd>*GET /session/:sessionId/element/:id/equals/:other*</dd>
<dd>
<dl>
<dd>Test if two element IDs refer to the same DOM element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - First element ID to test in the pair</dd>
<dd>`:other` - Second element ID to test in the pair</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{boolean}` Whether the two IDs refer to the same element.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/displayed ===

<dl>
<dd>*GET /session/:sessionId/element/:id/displayed*</dd>
<dd>
<dl>
<dd>Determine if an element is currently displayed.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{boolean}` Whether the element is displayed.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#isDisplayed() RenderedWebElement#isDisplayed()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/location ===

<dl>
<dd>*GET /session/:sessionId/element/:id/location*</dd>
<dd>
<dl>
<dd>Determine an element's location on the page. The point `(0, 0)` refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with `x` and `y` properties.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{x:number, y:number}` The X and Y coordinates for the element on the page.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getLocation() RenderedWebElement#getLocation()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/location_in_view ===

<dl>
<dd>*GET /session/:sessionId/element/:id/location_in_view*</dd>
<dd>
<dl>
<dd>Determine an element's location on the screen once it has been scrolled into view.

*Note:* This is considered an internal command and should *only* be used to determine an element's
location for correctly generating native events.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{x:number, y:number}` The X and Y coordinates for the element.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/size ===

<dl>
<dd>*GET /session/:sessionId/element/:id/size*</dd>
<dd>
<dl>
<dd>Determine an element's size in pixels. The size will be returned as a JSON object  with `width` and `height` properties.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{width:number, height:number}` The width and height of the element, in pixels.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getSize() RenderedWebElement#getSize()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/css/:propertyName ===

<dl>
<dd>*GET /session/:sessionId/element/:id/css/:propertyName*</dd>
<dd>
<dl>
<dd>Query the value of an element's computed CSS property. The CSS property to query should be specified using the CSS property name, *not* the !JavaScript property name (e.g. `background-color` instead of `backgroundColor`).</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The value of the specified CSS property.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#getValueOfCssProperty(java.lang.String) RenderedWebElement#getValueOfCssProperty(String)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/hover ===

<dl>
<dd>*POST /session/:sessionId/element/:id/hover*</dd>
<dd>
<dl>
<dd>Move the mouse over an element.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to manipulate.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#hover() RenderedWebElement#hover()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/element/:id/drag ===

<dl>
<dd>*POST /session/:sessionId/element/:id/drag*</dd>
<dd>
<dl>
<dd>Drag and drop an element. The distance to drag an element should be specified relative to the upper-left corner of the page.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
<dd>`:id` - ID of the element to query.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`x` - `{number}` The number of pixels to drag the element in the horizontal direction. A positive value indicates the element should be dragged to the right, while a negative value indicates that it should be dragged to the left.</dd>
<dd>`y` - `{number}` The number of pixels to drag the element in the vertical direction. A positive value indicates the element should be dragged down towards the bottom of the screen, while a negative value indicates that it should be dragged towards the top of the screen.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html#dragAndDropBy(int,%20int) RenderedWebElement#dragAndDropBy(int, int)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

----

=== /session/:sessionId/orientation ===

<dl>
<dd>*GET /session/:sessionId/orientation*</dd>
<dd>
<dl>
<dd>Get the current browser orientation. The server should return a valid orientation value as defined in [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/ScreenOrientation.html ScreenOrientation]: `{LANDSCAPE|PORTRAIT}`.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*Returns:*</dt>
<dd>`{string}` The current browser orientation corresponding to a value defined in [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/ScreenOrientation.html ScreenOrientation]: `{LANDSCAPE|PORTRAIT}`.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html#getOrientation() Rotatable#getOrientation()]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>

<dl>
<dd>*POST /session/:sessionId/orientation*</dd>
<dd>
<dl>
<dd>Set the browser orientation. The orientation should be specified as defined in [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/ScreenOrientation.html ScreenOrientation]: `{LANDSCAPE|PORTRAIT}`.</dd>
<dd>
<dl>
<dt>*URL Parameters:*</dt>
<dd>`:sessionId` - ID of the session to route the command to.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*JSON Parameters:*</dt>
<dd>`orientation` - `{string}` The new browser orientation as defined in [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/ScreenOrientation.html ScreenOrientation]: `{LANDSCAPE|PORTRAIT}`.</dd>
</dl>
</dd>
<dd>
<dl>
<dt>*See Also:*</dt>
<dd>[http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html#rotate(org.openqa.selenium.ScreenOrientation) Rotatable#rotate(ScreenOrientation)]</dd>
</dl>
</dd>
</dl>
</dd>
</dl>