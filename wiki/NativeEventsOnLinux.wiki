#summary Details about the implementation of native keyboard events for Firefox on Linux.
#labels WebDriver

= Introduction =
This page details how native events for Firefox on Linux were implemented. Basically, this feature allows better user emulation for WebDriver in Firefox on Linux. Using this implementation, it should be easily extended to any other browser with a plug-in mechanism that is implemented using GTK+.

= Purpose and scope =
== Existing State ==
When this task started, WebDriver already has user emulation via Javascript on all platforms it was supported and support for native events on Windows for Firefox. Hence, it had all of the code for getting native code running from within a Firefox extension on windows.
Specifically, sending keys to Firefox on Windows was done by calling a native method - _sendKeys(...)_, having it generate the Windows-specific events to make Firefox think it received user input.
== Requirement ==
The requirement was to implement the same native method _sendKeys(...)_ on Linux, so Firefox on Linux will behave in the same way. Mouse emulation was scheduled to a later stage.
Additional (strong) requirement was being able to run multiple Firefox instances by WebDriver and have them all working without having the user input focus.
== Technical knowledge required ==
In order to understand the underlying mechanism of calling native code from within a Firefox extension, familiarity with XPCOM is recommended. The following links were useful:
 * https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM
 * http://blog.mozilla.com/addons/2009/01/28/how-to-develop-a-firefox-extension/


= Possible solutions surveyed =
== X11 Events ==
The basic approach is creating a raw _XEvent_ and send it to the appropriate window using _XSendEvent_. Unfortunately, this approach will not work because synthetic events are marked, so applications receiving them actually know that those are generated events and usually ignore them. A suggestion on how to over-ride this problem was suggested by [http://www.semicomplete.com/blog/geekery/xsendevent-xdotool-and-ld_preload.html semicomplete.com] : Over-ride XNextEvent (which is the function used to pop the next X event from the send queue) to pop the next event and turn off the _send_event_ flag. While this solves the problem of synthetic events, it does not solve another problem: Some applications, including Firefox, will simply ignore events when in the background.

== XTest ==
Xtest is the most straightforward way to send X input events. It is used by many project to emulate user input or to translate input from a non-standard device to X windows input. For example, [http://synergy2.sourceforge.net/ Synergy] uses it. The problem with this solution is, again, that the window requires the focus to get those evnts.

=== XTest + Xvnc ===
A possible way to overcome this disadvantage would be to run Firefox inside Xvnc server in which it'll have all the focus it wants. This means packing more stuff with WebDriver or forcing our user to have some more pre-requisites for running WebDriver. For these reasons, it was frowned upon by SimonStewart, so we didn't go this way. *Update:* It looks like running Firefox 3 in Xvnc is problematic (Firefox will exit with some X error).

== GDK Events / GTK Signals ==
Under Windows, the native code receives a window handle to the current window from the accessibility API (See [https://developer.mozilla.org/en/NsIAccessibleDocument NsIAccessibleDocument]). On Linux, the same API yields a GdkWindow*. There are two ways from there:
 * The GTK way.
 * The GDK way.

A distinction between GTK+ and GDK is required: GDK is a slim wrapping over the raw, painful X API. GTK+ (which uses GDK) is a complete toolkit by itself, supplying a whole set of widgets for GUI application builders to use.

The GTK way would be to create GTK signals. The GDK way would be creating GdkEvents and pushing them into the queue that (normally) gets the translated X events. Since we're getting a GdkWindow*, it only makes sense we'll go the GDK way, doesn't it?

= Implementation =
== Over-coming the focus problem ==
All of the methods above had the same problem: Firefox, when not having the focus, ignores event sent to it. Much like, when trying to feed a four years-old child, it is inappropriate to try and shove food down his throat, is trying to force Firefox to handle events when in the background. And, like when a four years-old, trickery will get you much further: Trick Firefox into constantly thinking it's in the foreground by never letting the FocusOut events reach it. X events are captured in the same way described above (See [NativeEventsOnLinux#X11 Events]) and when a FocusOut detected it is replaced by another event. The exact code can be found in http://code.google.com/p/webdriver/source/browse/trunk/firefox/src/cpp/linux-specific/x_ignore_nofocus.c

== GDK Events ==
The GDK has two relevant events: _GDK_KEY_PRESS_ and _GDK_KEY_RELEASE_ which are created using _gdk_event_new_. After filling out the relevant event information (mainly the key pressed and a timestamp), it's pushed into the GDK event queue using _gdk_event_put_.
Notes worth paying attention to:
 * The window handle received is GdkWindow*. It must be assigned into the _window_ field of the event *after* being referenced (_g_object_ref) as it will be de-referenced when the event is deleted.
 * Events are copied into the queue. They must be released afterwards using _gdk_event_free_.
 * Events will not be processed until after the native call has returned to the javascript code and some time has passed, For this reason, the javascript code must sleep for a bit (which is why it'll only work in Firefox 3).

== Event Generation ==
=== Filling the event fields ===
The following fields are being filled:
 * _window_ <- the window handle.
 * _send_event_ <- 0, as we baldly lie about it not being a synthesized event.
 * _time_ <- current time since system boot in milliseconds.
 * _hardware_keycode_ <- The actual hardware key code for the letter it represents. This may be different according to different keyboard layouts and is only filled for the sake of completeness. See _XKeysimToKeycode_.
 * _keyval_ <- the value of the character to be emulated. If it's a regular character it's translated via gdk_unicode_to_keyval. If it's a modifier or non-alphanumeric key it gets the GDK symbol (like GDK_Shift_L, for example).
 * _is_modifier_ <- gets 1 if it's a modifier key, 0 otherwise. Makes sense?
 * _state_ <- OR-ed mask representing all of the "pressed" modifier keys.

=== Event generation algorithm ===
 * Generally, characters are sent as-is. This means two events are being generated for each character: Key Press, Key Release.
 * Modifier keys may also be sent (Such as _sendKeys(Keys.CTRL, "a")_). In this case, only one key event will be generated - either Key Press or Key Release, depending on the previous state of the modifier.
 * If the character can only be generated by using the shift key (such as uppercase characters or some punctuation marks), A shift key press is emulated (Shift key press before the character and key release afterwards).
 ** If the Shift modifier was set when we receive an uppercase character key, that will not apply. The end result will still be an uppercase letter.
 * If the Null key was sent, it clears the modifiers and generates no events.
 * At the end of a sendKeys call, all of the modifiers that were pressed will be released - the appropriate release events will be generated.

= Detailed implementation details =
== Files ==
The following files are relevant to the implementation:
 * *common/src/cpp/webdriver-interactions/interactions_linux.cpp* - All of the native events creation code.
 * *firefox/src/cpp/linux-specific/x_ignore_nofocus.c* - The code that hacks XNextEvent never to return focus out events. This code is used to generate a shared object that "injects" a hacked version of XNextEvent into Firefox (using LD_PRELOAD).
 * *firefox/src/cpp/webdriver-firefox/native_events.cpp* - Entry point for the native method calls. While this has no platform-specific code in theory, it has some, in practice.

== Translation between Keys.java and GDK key symbols ==
This is done using a function called _translate_code_to_gdk_symbol_ which is auto-generated using some python code. At the moment, it's not in the repository. What it does is produce the appropriate GDK key symbol for a given key code from Keys.java.

== XModifierKey ==
A class representing a modifier key and holds the GDK key symbol for this key, the mask representing this modifier (the thing that should be OR-ed to the _state_ field of the GdkEvent) and the actual state of the modifier.
== KeypressEventsHandler ==
The class that actually is responsible for generating the Gdk Events. The most important method is:
{{{
list<GdkEvent*> CreateEventsForKey(wchar_t key_to_emulate);
}}}
Which returns a list of event (which, in turn, will be submitted and freed) per key to emulate.

The other two public methods:
{{{
list<GdkEvent*> CreateModifierReleaseEvents();
}}}
Which is called before the sendKeys method returns - to generate events that indicate releasing all of the modifier keys that were set.

And:
{{{
guint32 get_last_event_time();
}}}
Which returns the time-stamp associated with the last event that was created. This is needed for another native call, _pending_keyboard_events()_ which will be called from the javascript code *after* sendKeys has returned, to make sure all of the events were handled and removed from the queue. That is the only way to make sure that the javascript code that does the sendKeys call will not return too soon (before all key press / release events have arrived to the window). See _utils.js_ for more details.