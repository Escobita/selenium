#summary Information about the Opera WebDriver implementation
#labels WebDriver

= OperaDriver =

!OperaDriver is a vendor-supported !WebDriver implementation developed by [http://opera.com/ Opera Software] and volunteers that implements [http://code.google.com/p/selenium/ WebDriver] for Opera.

!OperaDriver can drive the browser running various tests on your web pages, just as if a real user was navigating through them.  It can emulate actions like clicking links, entering text and submitting forms, and reports results back to you so you know your website works as intended.

!OperaDriver's end-user emulation ensures that your entire stack (HTML, scripts, styling embedded resources and backend setup) is functioning correctly, and this without tedious manual testing routines.

== Requirements ==

You will need a Java Runtime Environment 1.5 or newer (Oracle or OpenJDK) to use OperaDriver.  It uses the [http://dragonfly.opera.com/app/scope-interface/ Scope interface] (same as for [http://www.opera.com/dragonfly/ Dragonfly]) to communicate directly with Opera from Java.  Consequently, it is compatible out-of-the-box with Opera version 11.6 or newer, although it works for older versions with some tweaks.

The !OperaDriver server expects you to have Opera or Opera Next installed in the default location for each system:

|| *OS* || *Expected Location of Opera* ||
|| GNU/Linux || /usr/bin/opera<br />/usr/bin/opera-next<br />/usr/bin/operamobile ||
|| Mac || /Applications/Opera.app/Contents/MacOS/Opera<br />/Applications/Opera Next.app/Contents/MacOS/Opera<br />/Applications/Opera Mobile Emulator.app/Contents/Resources/Opera Mobile.app/Contents/MacOS/operamobile ||
|| Windows || %PROGRAMFILES%\Opera\opera.exe<br />%PROGRAMFILES%\Opera Next\opera.exe<br />%PROGRAMFILES%\Opera Mobile Emulator\OperaMobileEmu.exe ||

However, you can override this and specify a custom location to Opera by setting the capability `opera.binary` or environmental variable `OPERA_PATH`.  You can read more about configuring !OperaDriver under Advanced Usage.

=== !OperaDriver on 11.52 or older ===

The use !OperaDriver on Opera < 11.52, make sure you set the capabilities `opera.port` to `-1` and `opera.profile` to `""` (empty string) to disable `-debugproxy` and `-pd` command-line arguments which older versions of Opera do not support.  For even older versions (11.01 or older) you might need a wrapper script (see below).

== Getting Started ==

=== Remotely ===

To get set up [http://code.google.com/p/selenium/downloads/list please download] either *selenium-server-standalone* or *selenium-server* and make sure you have a fairly recent version of Opera installed.  All you need to do is create a new [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebDriver.html `WebDriver`] instance:

{{{
WebDriver driver = new OperaDriver();
driver.navigate().to("http://opera.com/");
}}}

Since !WebDriver provides APIs (called *bindings*) for several languages, you can do the same in [http://selenium.googlecode.com/svn/trunk/docs/api/rb/index.html Ruby] (using the [http://rubygems.org/gems/selenium-webdriver selenium-webdriver] gem) by setting the environmental variable Â´SELENIUM_SERVER_JAR` to the full path of the *selenium-server-standalone` JAR you just downloaded:

{{{
export SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar
}}}

And then do the following in Ruby:

{{{
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :opera
driver.navigate.to 'http://opera.com/'
}}}

In Python you'd set the same environmental variable and invoke Opera this way:

{{{
from selenium import webdriver
driver = webdriver.Opera()
driver.get('http://opera.com/')
}}}

=== Running the server as a standalone process ===

!OperaDriver is fully compatible with any RemoteWebDriver client.  Simply start up your server, create a remote client, and away you go:

{{{
WebDriver driver = new RemoteWebDriver("http://localhost:9515", DesiredCapabilities.opera());
}}}

=== Separate !OperaDriver ===

You can also use !OperaDriver as a standalone dependency in your project.  Download the package from the [https://github.com/operasoftware/operadriver/downloads Github project's download section] and extract it to a location of your choice.  To see some examples look at the [https://github.com/operasoftware/operadriver/tree/master/examples examples/] directory.  For your own projects include the lib/* directory on your classpath, for example:

{{{
javac -classpath "lib/*:." Example.java
}}}

In Eclipse this can be done under _Project_ > _Properties_ > _Java Build Path_ and then *"Add JARs..."* or *"Add External JARs..."* depending on the layout of your project.

You can also use Maven.  The group ID is `com.opera` and the artifact ID is `operadriver`.

== Documentation ==

* [http://operasoftware.github.com/operadriver/docs/ API documentation]
* [http://seleniumhq.org/docs/03_webdriver.html Selenium WebDriver documentation]

== Advanced Usage ==

=== Capabilities ===

You can use the [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/remote/DesiredCapabilities.html DesiredCapabilities] class to specify settings for OperaDriver.  The capabilities supported are:

==== opera.logging.level ====

(String) How verbose the logging should be.  Available levels are: SEVERE (highest value),
WARNING, INFO, CONFIG, FINE, FINER, FINEST (lowest value), ALL.  Default is INFO.

==== opera.logging.file ====

(String) Where to send the output of the logging.  Default is to not write to file.

==== opera.binary ====

(String) Path to the Opera binary to use.  If not specified, OperaDriver will
guess the path to your Opera installation (typically `/usr/bin/opera`> or
`C:\Program Files\Opera\opera.exe`).

==== opera.host ====

(String) The host Opera should connect to.  Unless you're starting Opera manually you won't
need this.

==== opera.port ====

(Integer) The port to Opera should connect to.  0 = Random, -1 = Opera default (for use with
Opera < 12).

==== opera.launcher ====

(String) Path to the launcher binary to use.  The launcher is a gateway between OperaDriver and
the Opera browser, and is being used for controlling the binary and taking external
screenshots.  If left blank, OperaDriver will use the launcher supplied with the package.

==== opera.arguments ====

(String) Arguments to pass to Opera, separated by spaces.  See `opera -help`
for available command-line switches.

==== opera.profile ====

(String) Directory to use for the Opera profile. If null a random temporary directory is used.
If "", an empty string, then the default autotest profile directory is used.

==== opera.idle ====

(Boolean) Whether to use Opera's alternative implicit wait implementation.  It will use an
in-browser heuristic to guess when a page has finished loading, allowing us with great accuracy
tell whether there are any planned events in the document.  This functionality is useful for
very simple test cases, but not designed for real-world testing.  It is disabled by default.

==== opera.display ====

(Integer) The X display to use.  (Only works on UNIX-like OSes.)

==== opera.autostart ====

(Boolean) Whether to auto-start the Opera binary.  If false, OperaDriver will wait for a
connection from the browser.  Go to "opera:debug", enter the correct port number, and hit
"Connect" to connect manually.

==== opera.no_restart ====

(Boolean) Whether to restart.

==== opera.no_quit ====

(Boolean) Whether to quit Opera when OperaDriver is shut down.  If enabled, it will keep the
browser running after the driver is shut down.

==== opera.guess_binary_path ====

(Boolean) Whether to guess the path to Opera if it isn't set in `opera.binary`.


==== opera.binary_profile ====

(String) The profile configuration we are using, for example "desktop" or "core-gogi".

=== Settings ===

To specify such things as a custom location of the Opera binary and command-line arguments you may use environmental variables or the !OperaDriverSettings object.  This is a list of the environmental variables which can be set on any OS:

 * `OPERA_PATH`: The full path to the Opera binary.
 * `OPERA_ARGS`: A space-delimited list of arguments to pass on to Opera, e.g. `-nowindow`, `-dimensions 1600x1200`, &c.
 * `OPERA_IDLE`: If set to a truthy value ("true", "1") you will enable a built-in browser-side checker for when a page is finished loading.
 * `OPERA_LAUNCHER`: Full path to the Opera binary launcher, typically located in `~/.launcher/launcher-*` on GNU/Linux and Mac.

You may also pass in the !OperaDriverSettings object to the constructor in OperaDriver:

{{{
OperaDriverSettings settings = new OperaDriverSettings();
settings.setOperaBinaryLocation("/path/to/opera");
settings.setOperaBinaryArguments("-nowindow -someothervalue");
settings.setUseOperaIdle(true);
settings.setOperaLauncherXvfbDisplay(8);
WebDriver driver = new OperaDriver(settings);
}}}

== opera-launcher ==

!OperaDriver extracts a program called opera-launcher to a sub-directory in your home directory called _.launcher_.  This is a server spawned by OperaDriver which handles the management of the Opera browser binary, as well as taking screenshots.  OperaDriver communicates with the launcher over the !OperaLauncherProtocol, which is not related to the !Scope protocol in any way.

The opera-launcher is a way to circumvent various problems related to process management on Windows and taking reliable, external screenshots for testing.

== Supported Opera versions ==

=== Desktop ===

This is a list of the official Opera Desktop versions we support:

|| *Version* || *Workaround/tweaks needed* ||
|| 12.00 || _(Not released yet.)_ ||
|| 11.51 || Set `opera.port` to 0 and `opera.profile` to null to enable parallelization on GNU/Linux ||
|| 11.50 ||  ||
|| 11.11 ||  ||
|| 11.10 ||  ||
|| 11.01 || `-autotestmode` command-line argument is not supported, use a [#Wrapper_script wrapper script] ||
|| 11.00 || `-autotestmode` command-line argument is not supported, use a [#Wrapper_script wrapper script] ||

The ability to run multiple instances of Opera in parallell is currently only
supported in the latest Opera version 11.51 on GNU/Linux (see comment above),
but support for Windows and Mac is planned in Opera 12.

We don't officially support Opera versions prior to 11.00, although it should
be possible to get OperaDriver working on Opera 10.6 with some minor tweaks.

==== Wrapper script ====

Some Opera versions don't accept the `-autotestmode` or `-debugproxy arguments`.  Since

{{{
#!/bin/sh
# Wrapper to prevent the -autotestmode argument reaching this version of Opera
# which doesn't support it.
`dirname $0`/opera
}}}

== Known Issues ==

 * Currently limited to one instance of Opera per machine
 * Problems with Operas with IME feature enabled (Opera Mobile, Android, bream)
 * Not using !WebDriver atoms yet
 * !JavaScript JIT is disabled for injected scripts

=== Think you've found a bug? ===

Check if the bug has been [https://github.com/operasoftware/operadriver/issues reported] yet.  If it hasn't, please open a new issue and be sure to include the [SeleniumHelp following]:

 * What platform are you running on?
 * What version of Selenium/OperaDriver are you using?
 * What version of Opera are you using?
 * The failure stacktrace, if available.

Of course, if your bug has already been reported, you can update the issue with the information above.  Having more information to work on makes it easier for us to track down the cause of the bug.

== Source Code ==

!OperaDriver is [https://github.com/operasoftware/operadriver/ available on Github].  It's distributed under the Apache License version 2.