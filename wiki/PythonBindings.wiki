#summary A summary of the python bindings for Selenium/Webdriver.
#labels Phase-Deploy,Phase-Support,WebDriver

=Introduction=

The python bindings for Selenium 2 are now available. The bindings include the full functionality of Selenium 1.x and include partial support for Selenium 2.x. The bindings are also compatible with Selenium Remote Control versions 1.x and 2.x. The bindings for Selenium 2 currently support the Remote, Firefox and Chrome protocols natively.

Before attempting to run a test, be sure to [http://code.google.com/p/selenium/downloads/list download the Selenium Server jar] file, and run it via 

{{{java -jar selenium-server-standalone.jar}}}

in your terminal/cmd prompt, before attempting to run a test.

== Quick Installation ==

{{{[sudo] easy_install selenium}}} or {{{[sudo] pip install selenium}}}

= Installation From Source =

Checkout the source code from http://code.google.com/p/selenium/source/checkout. 
The subversion repository is located at http://selenium.googlecode.com/svn/trunk. After the download is completed, cd to the root of the downloaded directory via terminal/cmd prompt. Perform the following command: 

{{{(sudo) python setup.py install}}}. 

Upon completion, the package should be installed successfully.

==Testing Source==

When developing Selenium, it is recommended you run the tests before and after making any changes to the code base. To perform these tests, enter {{{python py_test.py}}} in terminal while in the root directory of your local copy. Alternately, you can run {{{./go test_firefox_py}}} from the root of your local copy.

==Python Idioms==

Depending on the functionality you wish to utilize, importing the module is performed by entering the following in your python shell:

Selenium 1:
{{{from selenium import selenium}}}

Selenium 2:
{{{from selenium import FIREFOX}}}
{{{from selenium import CHROME}}}
{{{from selenium import REMOTE}}}

===Viewing Available Functionality===

To view all commands available to you [while inside your python shell], after importing perform:

Selenium 1:
{{{dir(selenium)}}}

Selenium 2:
{{{dir(FIREFOX)}}}
{{{dir(CHROME)}}}
{{{dir(REMOTE)}}}

===Command Documentation===

To view the docstrings (documentation text), perform {{{print 'functionname'.__doc__}}}, where functionname is the function you wish to view more information on. For example, {{{print selenium.open.__doc__}}}

==Comparison with Java Bindings==

Here is a summary of the major differences between the python and Java bindings.

===Function Names===

Function names separate compound terms with underscores, rather than using Java's camelCase formatting. For example, in python {{{get_title()}}} is the equivalent of  {{{getTitle()}}} in Java.

===Flatter Structures===

To reflect pythonic behavior of flat object hierarchies the python bindings e.g. {{{find_element_by_xpath("//h1")}}} rather than {{{findElement(By.xpath("//h1"));}}}

=== No PageFactory ===

The PageFactory in the Java Bindings makes extensive use of Java Annotations. At this stage we don't intend to implement anything similar. 

=== PageObject Implementation ===

Decorators are used to provide the PageObject support. The decorator is {{{@require_loaded}}}


==Browser Support==

All of the browsers supported by the Java implementation of Selenium are available in the Python bindings. For example:

With Selenium 1:
For Internet Explorer,
{{{
from selenium import selenium

selenium = selenium("localhost", 4444, "*iexplore", "http://google.com/")
selenium.start()
}}}

For Firefox,
{{{
from selenium import selenium

selenium = selenium("localhost", 4444, "*firefox", "http://google.com/")
selenium.start()
}}}

With Selenium 2:
{{{
from selenium.remote import connect
from selenium import FIREFOX

wd = connect(FIREFOX, server="http://example.com:8888")
}}}