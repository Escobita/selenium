#summary The release process for a new selenium

<wiki:toc depth=2>

= For Everything =

  # Bump the revision numbers at the top of the Rakefile.
  # Bump the revision number in firefox's install.rdf.
  # Bump the revision number in "java/server/src/org/openqa/selenium/server/VERSION.txt" and "javascript/selenium-core/scripts/selenium-version.js"
  # Commit version number bump.

= For Java =

  # Run `./go clean release`
  # Upload the new versions of the ZIP files from "build/dist" to the downloads page.
  # Add a subversion tag!
  # Update the docs. I do this on a UNIX variant:
    # `./go javadocs`
    # `find docs/api/java -name "*.html" | grep -v svn | xargs rm`
    # `cp -r build/javadoc/* docs/api/java`
    # `svn st docs/api/java | grep \! | awk '{print $2}' | xargs svn rm`
    # `svn st docs/api/java | grep \? | awk '{print $2}' | xargs svn add`
    # `find docs/api/java -name "*.html" | xargs svn ps "svn:mime-type" "text/html"`
    # Commit new docs


== Updating the Maven Repos ==

 # Prerequisite 1: Make sure Maven 2.2.1 and GnuPG are installed.
 # Prerequisite 2: Make sure your `~/.m2/settings.xml` contains the following lines in the `<servers>` section:
{{{
    <server>
        <id>sonatype-nexus-snapshots</id>
        <username>_your-username-for-oss.sonatype.org_</username>
        <password>_your-password_</password>
    </server>
    <server>
        <id>sonatype-nexus-staging</id>
        <username>_your-username-for-oss.sonatype.org_</username>
        <password>_your-password_</password>
    </server>
}}}
 # Prerequisite 3: Make sure your GnuPG public key is distributed to `hkp://pgp.mit.edu`
 # Make sure the dependencies in all pom.xml files under the maven directory are correct -- if not, update them (Hint: check for changes in the third_party directory)
 # Perform any manual steps/release hacks documented here: Until version 3.3.0 appears at http://repo1.maven.org/maven2/net/java/dev/jna/jna/ we need to do this in maven/pom.xml:
{{{
             <dependency>
                 <groupId>net.java.dev.jna</groupId>
                 <artifactId>jna</artifactId>
-                <version>3.3.0</version>
+                <version>3.2.3</version>
             </dependency>
}}}
 # Update the version number in all pom.xml files under the maven directory (but do not check in those changes) (`mvn versions:set -DnewVersion=2.3.0` inside the "maven" folder)
 # Execute:
   # `./go //java/client/src/org/openqa/selenium:client-combined:project`
   # `./go //java/server/src/org/openqa/grid/selenium:selenium:project`
   # `cd maven`
   # `mvn -Dtest=skip -DfailIfNoTests=false install`
 # Now all maven artifacts are installed in your local repository -- test them -- this is important, we should not deploy broken Maven artifacts!
 # When everything is fine, execute:
   `mvn source:jar javadoc:jar -Dtest=skip -DfailIfNoTests=false -Dgpg.passphrase=_your-GnuPG-key-passphrase_ -Psign deploy`                
 # Goto http://oss.sonatype.org, log in, close the staging repository.
 # Ideally you should test the artifacts here (you can actually skip the test right after "install" if you do this), because these are the _real_ files you will be irreversibly promoting to central. Once the staging repository has been closed you get the url to the repository by clicking on the repository. This url can be added to your project pom to test. (Remember that you may need to delete the artifacts in your local repository to make sure you re-download the staged artifacts).  
 # Promote that staged release in nexeus (or drop it).
 # Make sure any other manual hacks you did are documented in step 5 or committed back on trunk.

= For .NET =

  # Verify the build number is correct in dotnet/build.desc
  # Run `go clean //dotnet:release`. Note that this will require you to have the [http://shfb.codeplex.com .NET documentation generation tools] installed.
  # Upload the selenium-dotnet-xx.zip file from build/dotnet to the downloads page.

= For Ruby =

== selenium-webdriver ==

 # To release a new gem you will need to be registered as a gem owner on rubygems.org.
  # Bump the version number in rb/build.desc.
  # Update rb/CHANGES with a summary of changes since the last release.
  # Update docs: `rm -rf docs/api/rb && ./go //rb:docs` (you'll need the YARD gem installed)
  # Make sure the mime types are correct: 
    # `svn propset svn:mime-type text/html docs/api/rb/**/*.html`
    # `svn propset svn:mime-type application/javascript docs/api/rb/**/*.js`
    # `svn propset svn:mime-type text/css docs/api/rb/**/*.css`
  # Commit the changes.
  # `./go //rb:gem:release`
  # Bump version number in rb/build.desc to "X.X.X.dev" and commit the change.

= For Python =
# To release a new version you need to be registered as a Owner/Maintener on pypi.python.org
 # Bump the version number in setup.py 
 # `./go //py_release`
 # Bump the version number to the next version with dev e.g. 2.0b3dev and commit changes


= Areas to Improve =

  * We should really automate the version number bumps.