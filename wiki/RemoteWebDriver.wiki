#summary Information about the RemoteWebDriver

= Remote WebDriver =

This is information about using the client implementation of the RemoteWebDriver. This is the code that is used within your tests. For information on how to set up the server-side, please take a look at the RemoteWebDriverServer page.

== Installing ==

Copy the jars from the "remote/client/lib/runtime" directory to the classpath.

== Using == 

This is probably best demonstrated with some code:

{{{
// We could use any driver for our tests...
DesiredCapabilities capabilities = new DesiredCapabilities();

// ... but only if it supports javascript
capabilities.setJavascriptEnabled(true);

// Get a handle to the driver. This will throw an exception
// if a matching driver cannot be located
WebDriver driver = new RemoteWebDriver(capabilities);

// Query the driver to find out more information
Capabilities actualCapabilities = ((RemoteWebDriver) driver).getCapabilities();

// And now use it
driver.get("http://www.google.com");
}}}

One nice feature of the remote webdriver is that exceptions often have an attached screen shot, encoded as a Base64 PNG. In order to get this screenshot, you need to write code similar to:

{{{
public String extractScreenShot(WebDriverException e) {
  Throwable cause = e.getCause();
  if (cause instanceof ScreenshotException) {
    return ((ScreenshotException) cause).getBase64EncodedScreenshot();
  }
  return null;
}
}}}

== Pros ==
 
  * Separates where the tests are running from where the browser is.
  * Allows tests to be run with browsers not available on the current OS (because the browser can be elsewhere)
  * Introduces extra latency to tests, particularly when exceptions are thrown.

== Cons ==
  
  * Requires an external servlet container to be running
  * You may find problems with line endings when getting text from the remote server