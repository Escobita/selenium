#summary Information about the Safari Driver
#labels WebDriver

= The !SafariDriver =

The !SafariDriver is implemented as a Safari browser extension.  The driver inverts the traditional client/server relationship and communicates with the !WebDriver client using [http://en.wikipedia.org/wiki/WebSocket WebSockets].

The !SafariDriver requires Safari 5.1+

== Getting Started ==

While ready for use, the !SafariDriver still requires a bit of manual intervention before you can start writing tests.  If you're not comfortable checking out and [BuildingWebDriver building the Selenium project] from source, you may want to wait for us to make a general !SafariDriver release.

Still here? Ok, let's get started:

First, sign up for Apple's (free) [https://developer.apple.com/programs/safari/ Safari Developer Program] and generate a signed certificate for the extension.

Next, build the !SafariDriver extension:
{{{
$ ./go safari
}}}

Finally, install the extension.
  # Launch Safari
  # Open the Extension Builder (Develop > Show Extension Builder)
  # Add a new extension: `$SELENIUM_CLIENT/build/javascript/safari-driver/SafariDriver.safariextension`
  # Click Install

Once you've installed the extension, you can start writing tests:
{{{
import static org.junit.Assume.assumeTrue;

import org.openqa.selenium.By;
import org.openqa.selenium.Platform;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class SafariDriverTests {

  private WebDriver driver = null;

  private static boolean isSupportedPlatform() {
    Platform current = Platform.getCurrent();
    return Platform.MAC.is(current) || Platform.WINDOWS.is(current);
  }

  @Before
  public void createDriver() {
    assumeTrue(isSupportedPlatform());
    driver = new SafariDriver();
  }

  @After
  public void quitDriver() {
    driver.quit();
  }

  @Test
  public void shouldBeAbleToPerformAGoogleSearch() {
    driver.get("http://www.google.com");
    driver.findElement(By.name("q")).sendKeys("webdriver");
    driver.findElement(By.name("btnG")).click();
    new WebDriverWait(driver, 3)
        .until(ExpectedConditions.titleIs("webdriver - Google Search"));
  }
}
}}}

=== Debugging ===

Sometimes, a test may hang after sending a command to the !SafariDriver. This usually indicates something blew up. Thankfully, the !SafariDriver is quite chatty.

First open the !WebKit inspector on the page under test and check the console output. The console is cleared each time a page is loaded, so you'll only be able to see the logs for the most recent injected script. You can select the injected script and set break points inside the inspector, but it is sandboxed from the page, so you can't play with it using the inspector's REPL.

Next, check the global page: Develop > Show Extension Builder. Select the WebDriver extension, and click "Inspect global page." Again, the !SafariDriver is super chatty, so you should see what went wrong on the console.  You can set script break points for the injected page and interact with it using the REPL.

== Known Issues ==

All known issues with the !SafariDriver may be found on our [http://code.google.com/p/selenium/issues/list?can=1&q=browser%3DSafari+component%3DWebDriver+status%3ANew%2CAccepted%2CWorkingAsIntended%2CWontFix%2CNotFeasible&colspec=ID+Stars+Type+Status+Priority+Owner+Summary+Browser+Component&cells=tiles issue tracker].

== Reporting Bugs ==

If you think you've found a bug, please open a [http://code.google.com/p/selenium/issues/list bug] on our issue tracker.  When filing a bug, please adhere to the following guidelines:
  # Prefix your summary line with "`[SafariDriver]`."  For example: "`[SafariDriver] Unable to execute JavaScript`".
  # Include the injected script's log output (see [#Debugging above]).
  # Include the global page's log output (again, see [#Debugging above]).
  # Include a [http://www.webkit.org/quality/reduction.html reduced] test case for your bug.
  # Avoid filing duplicate bugs for the aforementioned [#Known_Issues known issues].

== !SafariDriver Internals ==

Refer to the SafariDriverInternals wiki page.