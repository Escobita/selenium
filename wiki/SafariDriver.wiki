#summary Information about the Safari Driver
#labels WebDriver

= The !SafariDriver =

The !SafariDriver is implemented as a Safari browser extension.  The driver inverts the traditional client/server relationship and communicates with the !WebDriver client using [http://en.wikipedia.org/wiki/WebSocket WebSockets].

The !SafariDriver requires Safari 5.0+

== Getting Started ==

First, sign up for Apple's (free) [https://developer.apple.com/programs/safari/ Safari Developer Program] and generate a signed certificate for the extension.

Next, build the !SafariDriver extension:
{{{
$ ./go safari
}}}

Finally, install the extension.
  # Launch Safari
  # Open the Extension Builder (Develop > Show Extension Builder)
  # Add a new extension: `$SELENIUM_CLIENT/build/javascript/safari-driver/SafariDriver.safariextension`
  # Click Install

Once you've installed the extension, you can start writing tests:
{{{
import static org.hamcrest.Matchers.is;
import static org.junit.Assume.assumeThat;

import org.openqa.selenium.By;
import org.openqa.selenium.Platform;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class SafariDriverTests {

  private WebDriver driver = null;

  private static boolean isSupportedPlatform() {
    Platform current = Platform.getCurrent();
    return Platform.MAC.is(current) || Platform.WINDOWS.is(current);
  }

  @Before
  public void createDriver() {
    assumeThat(isSupportedPlatform(), is(true));
    driver = new SafariDriver();
  }

  @After
  public void quitDriver() {
    driver.quit();
  }

  @Test
  public void shouldBeAbleToPerformAGoogleSearch() {
    driver.get("http://www.google.com");
    driver.findElement(By.name("q")).sendKeys("webdriver");
    driver.findElement(By.name("btnG")).click();
    new WebDriverWait(driver, 3)
        .until(ExpectedConditions.titleIs("webdriver - Google Search"));
  }
}
}}}

=== Debugging ===

Sometimes, a test may hang after sending a command to the !SafariDriver. This usually indicates something blew up. Thankfully, the !SafariDriver is quite chatty.

First open the !WebKit inspector on the page under test and check the console output. The console is cleared each time a page is loaded, so you'll only be able to see the logs for the most recent injected script. You can select the injected script and set break points inside the inspector, but it is sandboxed from the page, so you can't play with it using the inspector's REPL.

Next, check the global page: Develop > Show Extension Builder. Select the WebDriver extension, and click "Inspect global page." Again, the !SafariDriver is super chatty, so you should see what went wrong on the console.  You can set script break points for the injected page and interact with it using the REPL.

== Known Issues ==

All known issues with the !SafariDriver may be found on our [http://code.google.com/p/selenium/issues/list?colspec=ID%20Stars%20Type%20Status%20Priority%20Owner%20Summary%20Browser%20Component&cursor=selenium%3A2648&q=browser%3DSafari%20component%3DWebDriver&ts=1335052784&updated=2648 issue tracker].

== Reporting Bugs ==

If you think you've found a bug, please open a [http://code.google.com/p/selenium/issues/list bug] on our issue tracker.  When filing a bug, please adhere to the following guidelines:
  # Prefix your summary line with "`[SafariDriver]`."  For example: "`[SafariDriver] Unable to execute JavaScript`".
  # Include the injected script's log output (see [#Debugging above]).
  # Include the global page's log output (again, see [#Debugging above]).
  # Include a [http://www.webkit.org/quality/reduction.html reduced] test case for your bug.
  # Avoid filing duplicate bugs for the aforementioned [#Known_Issues known issues].

== !SafariDriver Internals ==

=== Communicating with the !SafariDriver ===

The !SafariDriver communicates with clients using !WebSockets. While the !SafariDriver browser extension maintains the client-end of the !WebSocket extension, this section refers to it as the "server" end of the !WebDriver API. Similarly, the term "client" refers to the user-facing !WebDriver API that issues commands to the server.

==== Command ====

|| *Key* || *Type* || *Description* ||
|| id || string || A random ID assigned to the command by the client; may be any string value. ||
|| name || string || The name of the command. Should be one of the values defined in [http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/remote/DriverCommand.html org.openqa.selenium.remote.DriverCommand]. ||
|| parameters || `Object` || The command parameters as a JSON object. All parameter (key, value) pairs are consistent with those documented in the [JsonWireProtocol#Command_Reference JSON wire protocol]. ||

Commands that rely on a URL parameter in the wire protocol should include those parameters in the parameter map using the same name as documented in the JsonWireProtocol. For instance, the wire protocol command
{{{
POST /session/:sessionId/window/:windowHandle/size

{"width":250, "height":250}
}}}
Should be encoded for the !SafariDriver as
{{{
{
  "origin": "webdriver",
  "type": "command",
  "command": {
    "id": "random-id-1234",
    "name": "setWindowSize",
    "parameters": {
      "sessionId": "mySessionId",
      "windowHandle": "current"
    }
  }
}
}}}
The !SafariDriver tracks sessions by !WebSocket connection, so the `sessionId` parameter may actually be excluded from the parameter set.

==== Response ====

The !SafariDriver's response objects have a similar structure to commands:
{{{
{
  "origin": "webdriver",
  "type": "response",
  "id": "random-id-1234",
  "response": {
    "status": 0,
    "value": null
  }
}
}}}
The `id` field in each response should echoe the ID sent with the corresponding command object.  The `response` field has the same format as specified by the [JsonWireProtocol#Responses JSON wire protocol].

==== On Command/Response IDs ====

The !SafariDriver will synchronize the execution of every command it receives. Thus, each response should always match the original command sent by the client. Upon receiving a response, the client should check that the ID matches the one sent with the original command. It is a catastrophic failure if these IDs do not match.

==== Connecting to the !SafariDriver ====

Clients may connect to the !SafariDriver by opening a page with the following:
{{{
<!DOCTYPE html>
<script>
window.onload = function() {
  window.postMessage({
    'type': 'connect',
    'origin': 'webdriver',
    'url': 'ws://localhost:1234/wd'
  }, '*');
};
</script>
}}}
The posted message is intercepted by the injected script and passed along to the extension's global page, which will in turn establish the !WebSocket connection with the requested server.

Safari will not load extensions for `file://` URLs. In order to open the connection page, as shown above, it is recommended that this page be served by the !WebSocket server maintained by the !SafariDriver client.

The !SafariDriver supports multiple !WebSocket connections. Each connection is treated as a separate session with its own timeout state (i.e., for implicit waits). All sessions share state for window and frame focus. Furthermore, the execution of commands is synchronized globally, across all sessions.

=== Development ===

Once you have manually installed the !SafariDriver extension, as outlined above,
you can reload your changes by re-compiling the extension, opening the extension builder, and clicking the "Reload" button for the !WebDriver extension.

If you are using Mac OSX, you can automate this process by running
{{{
$ ./go safari:reinstall
}}}